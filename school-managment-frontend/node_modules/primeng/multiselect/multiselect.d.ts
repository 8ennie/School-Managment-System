import { ElementRef, OnInit, AfterViewInit, AfterContentInit, AfterViewChecked, OnDestroy, Renderer2, EventEmitter, ChangeDetectorRef, TemplateRef, QueryList } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import { SelectItem } from 'primeng/api';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/api';
import * as ɵngcc3 from '@angular/cdk/scrolling';
import * as ɵngcc4 from 'primeng/tooltip';
export declare const MULTISELECT_VALUE_ACCESSOR: any;
export declare class MultiSelectItem {
    option: SelectItem;
    selected: boolean;
    disabled: boolean;
    visible: boolean;
    itemSize: number;
    template: TemplateRef<any>;
    maxSelectionLimitReached: boolean;
    onClick: EventEmitter<any>;
    onKeydown: EventEmitter<any>;
    onOptionClick(event: Event): void;
    onOptionKeydown(event: Event): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MultiSelectItem>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MultiSelectItem, "p-multiSelectItem", never, {
    "option": "option";
    "selected": "selected";
    "disabled": "disabled";
    "visible": "visible";
    "itemSize": "itemSize";
    "template": "template";
    "maxSelectionLimitReached": "maxSelectionLimitReached";
}, {
    "onClick": "onClick";
    "onKeydown": "onKeydown";
}, never>;
}
export declare class MultiSelect implements OnInit, AfterViewInit, AfterContentInit, AfterViewChecked, OnDestroy, ControlValueAccessor {
    el: ElementRef;
    renderer: Renderer2;
    private cd;
    scrollHeight: string;
    _defaultLabel: string;
    defaultLabel: string;
    style: any;
    styleClass: string;
    panelStyle: any;
    panelStyleClass: string;
    inputId: string;
    disabled: boolean;
    readonly: boolean;
    filter: boolean;
    filterPlaceHolder: string;
    overlayVisible: boolean;
    tabindex: number;
    appendTo: any;
    dataKey: string;
    name: string;
    ariaLabelledBy: string;
    displaySelectedLabel: boolean;
    maxSelectedLabels: number;
    selectionLimit: number;
    selectedItemsLabel: string;
    showToggleAll: boolean;
    emptyFilterMessage: string;
    resetFilterOnHide: boolean;
    dropdownIcon: string;
    optionLabel: string;
    showHeader: boolean;
    autoZIndex: boolean;
    baseZIndex: number;
    filterBy: string;
    virtualScroll: boolean;
    itemSize: number;
    showTransitionOptions: string;
    hideTransitionOptions: string;
    ariaFilterLabel: string;
    filterMatchMode: string;
    tooltip: string;
    tooltipPosition: string;
    tooltipPositionStyle: string;
    tooltipStyleClass: string;
    containerViewChild: ElementRef;
    filterInputChild: ElementRef;
    footerFacet: any;
    headerFacet: any;
    templates: QueryList<any>;
    onChange: EventEmitter<any>;
    onFocus: EventEmitter<any>;
    onBlur: EventEmitter<any>;
    onClick: EventEmitter<any>;
    onPanelShow: EventEmitter<any>;
    onPanelHide: EventEmitter<any>;
    value: any[];
    onModelChange: Function;
    onModelTouched: Function;
    overlay: HTMLDivElement;
    valuesAsString: string;
    focus: boolean;
    filled: boolean;
    documentClickListener: any;
    selfClick: boolean;
    panelClick: boolean;
    filterValue: string;
    visibleOptions: SelectItem[];
    disabledSelectedOptions: SelectItem[];
    filtered: boolean;
    itemTemplate: TemplateRef<any>;
    selectedItemsTemplate: TemplateRef<any>;
    headerCheckboxFocus: boolean;
    _options: any[];
    maxSelectionLimitReached: boolean;
    documentResizeListener: any;
    constructor(el: ElementRef, renderer: Renderer2, cd: ChangeDetectorRef);
    options: any[];
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    writeValue(value: any): void;
    checkSelectionLimit(): void;
    updateFilledState(): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    onOptionClick(event: any): void;
    isSelected(value: any): boolean;
    findSelectionIndex(val: any): number;
    toggleAll(event: Event): void;
    isAllChecked(): boolean;
    isAllVisibleOptionsChecked(): boolean;
    getEnabledOptionCount(): number;
    setDisabledSelectedOptions(): void;
    show(): void;
    onOverlayAnimationStart(event: AnimationEvent): void;
    appendOverlay(): void;
    restoreOverlayAppend(): void;
    alignOverlay(): void;
    hide(): void;
    close(event: any): void;
    onMouseclick(event: any, input: any): void;
    onInputFocus(event: any): void;
    onInputBlur(event: any): void;
    onOptionKeydown(event: any): void;
    findNextItem(item: any): any;
    findPrevItem(item: any): any;
    onKeydown(event: KeyboardEvent): void;
    updateLabel(): void;
    findLabelByValue(val: any): string;
    onFilter(): void;
    activateFilter(): void;
    isItemVisible(option: SelectItem): boolean;
    getVisibleOptions(): SelectItem[];
    onHeaderCheckboxFocus(): void;
    onHeaderCheckboxBlur(): void;
    bindDocumentClickListener(): void;
    unbindDocumentClickListener(): void;
    bindDocumentResizeListener(): void;
    unbindDocumentResizeListener(): void;
    onWindowResize(): void;
    onOverlayHide(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MultiSelect>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MultiSelect, "p-multiSelect", never, {
    "scrollHeight": "scrollHeight";
    "filter": "filter";
    "displaySelectedLabel": "displaySelectedLabel";
    "maxSelectedLabels": "maxSelectedLabels";
    "selectedItemsLabel": "selectedItemsLabel";
    "showToggleAll": "showToggleAll";
    "emptyFilterMessage": "emptyFilterMessage";
    "resetFilterOnHide": "resetFilterOnHide";
    "dropdownIcon": "dropdownIcon";
    "showHeader": "showHeader";
    "autoZIndex": "autoZIndex";
    "baseZIndex": "baseZIndex";
    "filterBy": "filterBy";
    "showTransitionOptions": "showTransitionOptions";
    "hideTransitionOptions": "hideTransitionOptions";
    "filterMatchMode": "filterMatchMode";
    "tooltip": "tooltip";
    "tooltipPosition": "tooltipPosition";
    "tooltipPositionStyle": "tooltipPositionStyle";
    "defaultLabel": "defaultLabel";
    "options": "options";
    "disabled": "disabled";
    "overlayVisible": "overlayVisible";
    "style": "style";
    "styleClass": "styleClass";
    "panelStyle": "panelStyle";
    "panelStyleClass": "panelStyleClass";
    "inputId": "inputId";
    "readonly": "readonly";
    "filterPlaceHolder": "filterPlaceHolder";
    "tabindex": "tabindex";
    "appendTo": "appendTo";
    "dataKey": "dataKey";
    "name": "name";
    "ariaLabelledBy": "ariaLabelledBy";
    "selectionLimit": "selectionLimit";
    "optionLabel": "optionLabel";
    "virtualScroll": "virtualScroll";
    "itemSize": "itemSize";
    "ariaFilterLabel": "ariaFilterLabel";
    "tooltipStyleClass": "tooltipStyleClass";
}, {
    "onChange": "onChange";
    "onFocus": "onFocus";
    "onBlur": "onBlur";
    "onClick": "onClick";
    "onPanelShow": "onPanelShow";
    "onPanelHide": "onPanelHide";
}, ["footerFacet", "headerFacet", "templates"]>;
}
export declare class MultiSelectModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<MultiSelectModule, [typeof MultiSelect, typeof MultiSelectItem], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.SharedModule, typeof ɵngcc3.ScrollingModule, typeof ɵngcc4.TooltipModule], [typeof MultiSelect, typeof ɵngcc2.SharedModule, typeof ɵngcc3.ScrollingModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<MultiSelectModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlzZWxlY3QuZC50cyIsInNvdXJjZXMiOlsibXVsdGlzZWxlY3QuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBPbkluaXQsIEFmdGVyVmlld0luaXQsIEFmdGVyQ29udGVudEluaXQsIEFmdGVyVmlld0NoZWNrZWQsIE9uRGVzdHJveSwgUmVuZGVyZXIyLCBFdmVudEVtaXR0ZXIsIENoYW5nZURldGVjdG9yUmVmLCBUZW1wbGF0ZVJlZiwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbmltYXRpb25FdmVudCB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgU2VsZWN0SXRlbSB9IGZyb20gJ3ByaW1lbmcvYXBpJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgTVVMVElTRUxFQ1RfVkFMVUVfQUNDRVNTT1I6IGFueTtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE11bHRpU2VsZWN0SXRlbSB7XG4gICAgb3B0aW9uOiBTZWxlY3RJdGVtO1xuICAgIHNlbGVjdGVkOiBib29sZWFuO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIHZpc2libGU6IGJvb2xlYW47XG4gICAgaXRlbVNpemU6IG51bWJlcjtcbiAgICB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBtYXhTZWxlY3Rpb25MaW1pdFJlYWNoZWQ6IGJvb2xlYW47XG4gICAgb25DbGljazogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25LZXlkb3duOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBvbk9wdGlvbkNsaWNrKGV2ZW50OiBFdmVudCk6IHZvaWQ7XG4gICAgb25PcHRpb25LZXlkb3duKGV2ZW50OiBFdmVudCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNdWx0aVNlbGVjdCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJWaWV3Q2hlY2tlZCwgT25EZXN0cm95LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgZWw6IEVsZW1lbnRSZWY7XG4gICAgcmVuZGVyZXI6IFJlbmRlcmVyMjtcbiAgICBwcml2YXRlIGNkO1xuICAgIHNjcm9sbEhlaWdodDogc3RyaW5nO1xuICAgIF9kZWZhdWx0TGFiZWw6IHN0cmluZztcbiAgICBkZWZhdWx0TGFiZWw6IHN0cmluZztcbiAgICBzdHlsZTogYW55O1xuICAgIHN0eWxlQ2xhc3M6IHN0cmluZztcbiAgICBwYW5lbFN0eWxlOiBhbnk7XG4gICAgcGFuZWxTdHlsZUNsYXNzOiBzdHJpbmc7XG4gICAgaW5wdXRJZDogc3RyaW5nO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIHJlYWRvbmx5OiBib29sZWFuO1xuICAgIGZpbHRlcjogYm9vbGVhbjtcbiAgICBmaWx0ZXJQbGFjZUhvbGRlcjogc3RyaW5nO1xuICAgIG92ZXJsYXlWaXNpYmxlOiBib29sZWFuO1xuICAgIHRhYmluZGV4OiBudW1iZXI7XG4gICAgYXBwZW5kVG86IGFueTtcbiAgICBkYXRhS2V5OiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGFyaWFMYWJlbGxlZEJ5OiBzdHJpbmc7XG4gICAgZGlzcGxheVNlbGVjdGVkTGFiZWw6IGJvb2xlYW47XG4gICAgbWF4U2VsZWN0ZWRMYWJlbHM6IG51bWJlcjtcbiAgICBzZWxlY3Rpb25MaW1pdDogbnVtYmVyO1xuICAgIHNlbGVjdGVkSXRlbXNMYWJlbDogc3RyaW5nO1xuICAgIHNob3dUb2dnbGVBbGw6IGJvb2xlYW47XG4gICAgZW1wdHlGaWx0ZXJNZXNzYWdlOiBzdHJpbmc7XG4gICAgcmVzZXRGaWx0ZXJPbkhpZGU6IGJvb2xlYW47XG4gICAgZHJvcGRvd25JY29uOiBzdHJpbmc7XG4gICAgb3B0aW9uTGFiZWw6IHN0cmluZztcbiAgICBzaG93SGVhZGVyOiBib29sZWFuO1xuICAgIGF1dG9aSW5kZXg6IGJvb2xlYW47XG4gICAgYmFzZVpJbmRleDogbnVtYmVyO1xuICAgIGZpbHRlckJ5OiBzdHJpbmc7XG4gICAgdmlydHVhbFNjcm9sbDogYm9vbGVhbjtcbiAgICBpdGVtU2l6ZTogbnVtYmVyO1xuICAgIHNob3dUcmFuc2l0aW9uT3B0aW9uczogc3RyaW5nO1xuICAgIGhpZGVUcmFuc2l0aW9uT3B0aW9uczogc3RyaW5nO1xuICAgIGFyaWFGaWx0ZXJMYWJlbDogc3RyaW5nO1xuICAgIGZpbHRlck1hdGNoTW9kZTogc3RyaW5nO1xuICAgIHRvb2x0aXA6IHN0cmluZztcbiAgICB0b29sdGlwUG9zaXRpb246IHN0cmluZztcbiAgICB0b29sdGlwUG9zaXRpb25TdHlsZTogc3RyaW5nO1xuICAgIHRvb2x0aXBTdHlsZUNsYXNzOiBzdHJpbmc7XG4gICAgY29udGFpbmVyVmlld0NoaWxkOiBFbGVtZW50UmVmO1xuICAgIGZpbHRlcklucHV0Q2hpbGQ6IEVsZW1lbnRSZWY7XG4gICAgZm9vdGVyRmFjZXQ6IGFueTtcbiAgICBoZWFkZXJGYWNldDogYW55O1xuICAgIHRlbXBsYXRlczogUXVlcnlMaXN0PGFueT47XG4gICAgb25DaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uRm9jdXM6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uQmx1cjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25DbGljazogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25QYW5lbFNob3c6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uUGFuZWxIaWRlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICB2YWx1ZTogYW55W107XG4gICAgb25Nb2RlbENoYW5nZTogRnVuY3Rpb247XG4gICAgb25Nb2RlbFRvdWNoZWQ6IEZ1bmN0aW9uO1xuICAgIG92ZXJsYXk6IEhUTUxEaXZFbGVtZW50O1xuICAgIHZhbHVlc0FzU3RyaW5nOiBzdHJpbmc7XG4gICAgZm9jdXM6IGJvb2xlYW47XG4gICAgZmlsbGVkOiBib29sZWFuO1xuICAgIGRvY3VtZW50Q2xpY2tMaXN0ZW5lcjogYW55O1xuICAgIHNlbGZDbGljazogYm9vbGVhbjtcbiAgICBwYW5lbENsaWNrOiBib29sZWFuO1xuICAgIGZpbHRlclZhbHVlOiBzdHJpbmc7XG4gICAgdmlzaWJsZU9wdGlvbnM6IFNlbGVjdEl0ZW1bXTtcbiAgICBkaXNhYmxlZFNlbGVjdGVkT3B0aW9uczogU2VsZWN0SXRlbVtdO1xuICAgIGZpbHRlcmVkOiBib29sZWFuO1xuICAgIGl0ZW1UZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBzZWxlY3RlZEl0ZW1zVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgaGVhZGVyQ2hlY2tib3hGb2N1czogYm9vbGVhbjtcbiAgICBfb3B0aW9uczogYW55W107XG4gICAgbWF4U2VsZWN0aW9uTGltaXRSZWFjaGVkOiBib29sZWFuO1xuICAgIGRvY3VtZW50UmVzaXplTGlzdGVuZXI6IGFueTtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgY2Q6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBvcHRpb25zOiBhbnlbXTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgY2hlY2tTZWxlY3Rpb25MaW1pdCgpOiB2b2lkO1xuICAgIHVwZGF0ZUZpbGxlZFN0YXRlKCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogRnVuY3Rpb24pOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBGdW5jdGlvbik6IHZvaWQ7XG4gICAgc2V0RGlzYWJsZWRTdGF0ZSh2YWw6IGJvb2xlYW4pOiB2b2lkO1xuICAgIG9uT3B0aW9uQ2xpY2soZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgaXNTZWxlY3RlZCh2YWx1ZTogYW55KTogYm9vbGVhbjtcbiAgICBmaW5kU2VsZWN0aW9uSW5kZXgodmFsOiBhbnkpOiBudW1iZXI7XG4gICAgdG9nZ2xlQWxsKGV2ZW50OiBFdmVudCk6IHZvaWQ7XG4gICAgaXNBbGxDaGVja2VkKCk6IGJvb2xlYW47XG4gICAgaXNBbGxWaXNpYmxlT3B0aW9uc0NoZWNrZWQoKTogYm9vbGVhbjtcbiAgICBnZXRFbmFibGVkT3B0aW9uQ291bnQoKTogbnVtYmVyO1xuICAgIHNldERpc2FibGVkU2VsZWN0ZWRPcHRpb25zKCk6IHZvaWQ7XG4gICAgc2hvdygpOiB2b2lkO1xuICAgIG9uT3ZlcmxheUFuaW1hdGlvblN0YXJ0KGV2ZW50OiBBbmltYXRpb25FdmVudCk6IHZvaWQ7XG4gICAgYXBwZW5kT3ZlcmxheSgpOiB2b2lkO1xuICAgIHJlc3RvcmVPdmVybGF5QXBwZW5kKCk6IHZvaWQ7XG4gICAgYWxpZ25PdmVybGF5KCk6IHZvaWQ7XG4gICAgaGlkZSgpOiB2b2lkO1xuICAgIGNsb3NlKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uTW91c2VjbGljayhldmVudDogYW55LCBpbnB1dDogYW55KTogdm9pZDtcbiAgICBvbklucHV0Rm9jdXMoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25JbnB1dEJsdXIoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgb25PcHRpb25LZXlkb3duKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGZpbmROZXh0SXRlbShpdGVtOiBhbnkpOiBhbnk7XG4gICAgZmluZFByZXZJdGVtKGl0ZW06IGFueSk6IGFueTtcbiAgICBvbktleWRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIHVwZGF0ZUxhYmVsKCk6IHZvaWQ7XG4gICAgZmluZExhYmVsQnlWYWx1ZSh2YWw6IGFueSk6IHN0cmluZztcbiAgICBvbkZpbHRlcigpOiB2b2lkO1xuICAgIGFjdGl2YXRlRmlsdGVyKCk6IHZvaWQ7XG4gICAgaXNJdGVtVmlzaWJsZShvcHRpb246IFNlbGVjdEl0ZW0pOiBib29sZWFuO1xuICAgIGdldFZpc2libGVPcHRpb25zKCk6IFNlbGVjdEl0ZW1bXTtcbiAgICBvbkhlYWRlckNoZWNrYm94Rm9jdXMoKTogdm9pZDtcbiAgICBvbkhlYWRlckNoZWNrYm94Qmx1cigpOiB2b2lkO1xuICAgIGJpbmREb2N1bWVudENsaWNrTGlzdGVuZXIoKTogdm9pZDtcbiAgICB1bmJpbmREb2N1bWVudENsaWNrTGlzdGVuZXIoKTogdm9pZDtcbiAgICBiaW5kRG9jdW1lbnRSZXNpemVMaXN0ZW5lcigpOiB2b2lkO1xuICAgIHVuYmluZERvY3VtZW50UmVzaXplTGlzdGVuZXIoKTogdm9pZDtcbiAgICBvbldpbmRvd1Jlc2l6ZSgpOiB2b2lkO1xuICAgIG9uT3ZlcmxheUhpZGUoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTXVsdGlTZWxlY3RNb2R1bGUge1xufVxuIl19