{"version":3,"sources":["ng://primeng/table/table.ts"],"names":["TableService","this","sortSource","Subject","selectionSource","contextMenuSource","valueSource","totalRecordsSource","columnsSource","sortSource$","asObservable","selectionSource$","contextMenuSource$","valueSource$","totalRecordsSource$","columnsSource$","prototype","onSort","sortMeta","next","onSelectionChange","onContextMenu","data","onValueChange","value","onTotalRecordsChange","onColumnsChange","columns","__decorate","Injectable","Table","el","zone","tableService","cd","pageLinks","alwaysShowPaginator","paginatorPosition","paginatorDropdownScrollHeight","currentPageReportTemplate","defaultSortOrder","sortMode","resetPageOnSort","selectionChange","EventEmitter","contextMenuSelectionChange","contextMenuSelectionMode","rowTrackBy","index","item","lazy","lazyLoadOnInit","compareSelectionBy","csvSeparator","exportFilename","filters","filterDelay","expandedRowKeys","editingRowKeys","rowExpandMode","virtualScrollDelay","virtualRowHeight","columnResizeMode","loadingIcon","showLoader","stateStorage","editMode","onRowSelect","onRowUnselect","onPage","onFilter","onLazyLoad","onRowExpand","onRowCollapse","onContextMenuSelect","onColResize","onColReorder","onRowReorder","onEditInit","onEditComplete","onEditCancel","onHeaderCheckboxToggle","sortFunction","firstChange","rowsChange","onStateSave","onStateRestore","_value","_totalRecords","_first","selectionKeys","_sortOrder","ngOnInit","emit","createLazyLoadMetadata","restoringFilter","initialized","ngAfterContentInit","_this","templates","forEach","getType","captionTemplate","template","headerTemplate","bodyTemplate","loadingBodyTemplate","footerTemplate","summaryTemplate","colGroupTemplate","expandedRowTemplate","frozenRowsTemplate","frozenHeaderTemplate","frozenBodyTemplate","frozenFooterTemplate","frozenColGroupTemplate","emptyMessageTemplate","paginatorLeftTemplate","paginatorRightTemplate","ngAfterViewInit","isStateful","resizableColumns","restoreColumnWidths","ngOnChanges","simpleChange","stateRestored","restoreState","currentValue","totalRecords","length","sortField","sortSingle","multiSortMeta","sortMultiple","hasFilter","_filter","virtualScroll","virtualScrollCallback","_columns","reorderableColumns","columnOrderStateRestored","restoreColumnOrder","_sortField","sortOrder","_multiSortMeta","selection","_selection","preventSelectionSetterPropagation","updateSelectionKeys","Object","defineProperty","val","cols","_rows","dataKey","Array","isArray","_b","__values","_c","done","String","ObjectUtils","resolveFieldData","onPageChange","event","first","rows","saveState","anchorRowIndex","sort","originalEvent","field","metaKey","ctrlKey","getSortMeta","order","push","restoringSort","customSort","mode","data1","data2","value1","value2","result","localeCompare","multisortField","multisortmeta","i","isSorted","sorted","handleRowClick","target","targetNode","nodeName","parentNode","parentElement","DomHandler","hasClass","selectionMode","isMultipleSelectionMode","shiftKey","clearSelection","rangeRowIndex","clearSelectionRange","rowIndex","selectRange","rowData","selected","isSelected","metaSelection","rowTouched","metaKeySelection","dataKeyValue","isSingleSelectionMode","selectionIndex_1","findIndexInSelection","filter","type","__spread","selectionIndex_2","handleRowTouchEnd","handleRowRightClick","contextMenu","contextMenuSelection","show","rangeStart","rangeEnd","paginator","rangeRowData","filteredValue","this_1","selectionIndex","undefined","equals","toggleRowWithRadio","toggleRowWithCheckbox","selectionIndex_3","toggleRowsWithCheckbox","check","slice","checked","matchMode","filterTimeout","clearTimeout","isFilterBlank","setTimeout","filterGlobal","trim","globalFilterFieldsArray","globalFilterFields","Error","localMatch","globalMatch","localFiltered","prop","hasOwnProperty","filterMeta","filterField","filterValue","filterMatchMode","dataFieldValue","filterConstraint","FilterUtils","j","globalFilterField","detectChanges","empty","globalFilter","reset","exportCSV","options","csv","selectionOnly","column","exportable","header","record","i_1","cellData","exportFunction","replace","blob","Blob","window","navigator","msSaveOrOpenBlob","link","document","createElement","style","display","body","appendChild","download","setAttribute","URL","createObjectURL","click","open","encodeURI","removeChild","updateEditingCell","cell","editingCell","editingCellData","editingCellField","bindDocumentEditListener","isEditingCellValid","find","documentEditListener","editingCellClick","removeClass","unbindDocumentEditListener","addEventListener","removeEventListener","initRowEdit","saveRowEdit","rowElement","cancelRowEdit","toggleRow","preventDefault","isRowExpanded","isRowEditing","onColumnResizeBegin","containerLeft","getOffset","containerViewChild","nativeElement","left","lastResizerHelperX","pageX","scrollLeft","onColumnResize","addClass","resizeHelperViewChild","height","offsetHeight","top","onColumnResizeEnd","delta","offsetLeft","columnWidth","offsetWidth","minWidth","parseInt","newColumnWidth","nextColumn","nextElementSibling","offsetParent","nextColumnWidth","nextColumnMinWidth","scrollable","scrollableView","findParentScrollableView","scrollableBodyTable","findSingle","scrollableHeaderTable","scrollableFooterTable","resizeColumnIndex","resizeColGroup","width","setScrollableItemsWidthOnExpandResize","tableViewChild","containerWidth","element","scrollableBody","scrollableHeader","scrollableFooter","scrollableBodyTableWidth","scrollableHeaderTableWidth","isContainerInViewport","setWidth","container","table","calculateScrollbarWidth","parent_1","colGroup","children","col","nextCol","onColumnDragStart","columnElement","reorderIconWidth","getHiddenElementOuterWidth","reorderIndicatorUpViewChild","reorderIconHeight","getHiddenElementOuterHeight","reorderIndicatorDownViewChild","draggedColumn","dataTransfer","setData","onColumnDragEnter","dropHeader","containerOffset","dropHeaderOffset","dragIndex","indexWithinGroup","dropIndex","targetLeft","columnCenter","Math","ceil","dropPosition","dropEffect","onColumnDragLeave","onColumnDrop","dropColumn","allowDrop","reorderArray","runOutsideAngular","draggable","onRowDragStart","rowDragging","draggedRowIndex","onRowDragOver","rowY","getWindowScrollTop","pageY","rowMidY","getOuterHeight","prevRowElement","previousElementSibling","droppedRowIndex","onRowDragLeave","onRowDragEnd","onRowDrop","handleVirtualScroll","page","callback","run","virtualScrollTimer","isEmpty","getBlockableElement","getStorage","localStorage","sessionStorage","stateKey","storage","state","saveColumnWidths","saveColumnOrder","keys","setItem","JSON","stringify","clearState","removeItem","stateString","getItem","state_1","parse","columnWidthsState","columnWidths","tableWidthState","tableWidth","Promise","resolve","then","widths","map","getOuterWidth","join","widths_1","split","headerCols","bodyCols","columnOrder_1","key","columnOrder","reorderedColumns_1","findColumnByKey","ngOnDestroy","ElementRef","NgZone","ChangeDetectorRef","Input","Output","ViewChild","static","ContentChildren","PrimeTemplate","Component","selector","providers","TableBody","dt","ScrollableView","loadingArray","subscription","subscribe","alignScrollBar","scrollLoadingTableViewChild","totalRecordsSubscription","setVirtualScrollerHeight","fill","_scrollHeight","setScrollHeight","ngAfterViewChecked","frozen","scrollableAlignerViewChild","calculateScrollbarHeight","scrollableSiblingBody","frozenColumns","frozenView","frozenSiblingBody","bindEvents","columnsSubscription","scrollHeaderViewChild","headerScrollListener","onHeaderScroll","bind","scrollFooterViewChild","footerScrollListener","onFooterScroll","bodyScrollListener","onBodyScroll","scrollBodyViewChild","unbindEvents","preventBodyScrollPropagation","scrollHeaderBoxViewChild","marginLeft","scrollFooterBoxViewChild","scrollTop","viewport","tableHeight","scrollTableViewChild","pageHeight_1","pageCount","virtualScrollerViewChild","scrollBodyTop","parseFloat","page_1","floor","scrollHeight","indexOf","relativeHeight","visibility","containerHeight","includes","percentHeight","diffValue","scrollBodyHeight","maxHeight","hasVerticalOverflow","scrollBarWidth","marginRight","unsubscribe","SortableColumn","isEnabled","updateSortState","onClick","onEnterKey","pSortableColumnDisabled","HostListener","Directive","host","[class.ui-sortable-column]","[class.ui-state-highlight]","[attr.tabindex]","SortIcon","SelectableRow","onTouchEnd","onKeyDown","row","which","nextRow","findNextSelectableRow","focus","prevRow","findPrevSelectableRow","pSelectableRowDisabled","[class.ui-selectable-row]","SelectableRowDblClick","ContextMenuRow","pContextMenuRowDisabled","[class.ui-contextmenu-selected]","RowToggler","pRowTogglerDisabled","ResizableColumn","resizer","className","resizerMouseDownListener","onMouseDown","bindDocumentEvents","documentMouseMoveListener","onDocumentMouseMove","documentMouseUpListener","onDocumentMouseUp","unbindDocumentEvents","pResizableColumnDisabled","ReorderableColumn","mouseDownListener","dragStartListener","onDragStart","dragOverListener","onDragEnter","dragEnterListener","dragLeaveListener","onDragLeave","onDragOver","onDrop","pReorderableColumnDisabled","EditableColumn","openCell","focusCellSelector","pFocusCellSelector","focusableElement","closeEditingCell","keyCode","moveToPreviousCell","moveToNextCell","findCell","currentCell","targetCell","findPreviousEditableColumn","invokeElementMethod","findNextEditableColumn","prevCell","previousRow","lastElementChild","nextCell","firstElementChild","pEditableColumnDisabled","EditableRow","pEditableRowDisabled","InitEditableRow","editableRow","SaveEditableRow","CancelEditableRow","CellEditor","editableColumn","inputTemplate","outputTemplate","decorators","Optional","__param","TableRadioButton","disabled","onFocus","boxViewChild","onBlur","TableCheckbox","TableHeaderCheckbox","valueChangeSubscription","updateCheckedState","selectionChangeSubscription","isDisabled","isAllFilteredValuesChecked","ReorderableRowHandle","ReorderableRow","droppable","dragEndListener","onDragEnd","pReorderableRowDisabled","TableModule","NgModule","imports","CommonModule","PaginatorModule","exports","SharedModule","declarations"],"mappings":"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","sourcesContent":["import { NgModule, Component, HostListener, OnInit, OnDestroy, AfterViewInit, AfterViewChecked, Directive, Optional, AfterContentInit, Input, Output, EventEmitter, ElementRef, ContentChildren, TemplateRef, QueryList, ViewChild, NgZone, EmbeddedViewRef, ViewContainerRef, ChangeDetectorRef, OnChanges, SimpleChanges} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { PaginatorModule } from 'primeng/paginator';\nimport { DomHandler } from 'primeng/dom';\nimport { ObjectUtils } from 'primeng/utils';\nimport { SortMeta } from 'primeng/api';\nimport { TableState } from 'primeng/api';\nimport { FilterMetadata } from 'primeng/api';\nimport { Injectable } from '@angular/core';\nimport { BlockableUI } from 'primeng/api';\nimport { Subject, Subscription } from 'rxjs';\nimport { FilterUtils } from 'primeng/utils';\n\n@Injectable()\nexport class TableService {\n\n    private sortSource = new Subject<SortMeta|SortMeta[]>();\n    private selectionSource = new Subject();\n    private contextMenuSource = new Subject<any>();\n    private valueSource = new Subject<any>();\n    private totalRecordsSource = new Subject<any>();\n    private columnsSource = new Subject();\n\n    sortSource$ = this.sortSource.asObservable();\n    selectionSource$ = this.selectionSource.asObservable();\n    contextMenuSource$ = this.contextMenuSource.asObservable();\n    valueSource$ = this.valueSource.asObservable();\n    totalRecordsSource$ = this.totalRecordsSource.asObservable();\n    columnsSource$ = this.columnsSource.asObservable();\n\n    onSort(sortMeta: SortMeta|SortMeta[]) {\n        this.sortSource.next(sortMeta);\n    }\n\n    onSelectionChange() {\n        this.selectionSource.next();\n    }\n\n    onContextMenu(data: any) {\n        this.contextMenuSource.next(data);\n    }\n\n    onValueChange(value: any) {\n        this.valueSource.next(value);\n    }\n\n    onTotalRecordsChange(value: number) {\n        this.totalRecordsSource.next(value);\n    }\n\n    onColumnsChange(columns: any[]) {\n        this.columnsSource.next(columns);\n    }\n}\n\n@Component({\n    selector: 'p-table',\n    template: `\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\"\n            [ngClass]=\"{'ui-table ui-widget': true, 'ui-table-responsive': responsive, 'ui-table-resizable': resizableColumns,\n                'ui-table-resizable-fit': (resizableColumns && columnResizeMode === 'fit'),\n                'ui-table-hoverable-rows': (rowHover||selectionMode), 'ui-table-auto-layout': autoLayout}\">\n            <div class=\"ui-table-loading ui-widget-overlay\" *ngIf=\"loading && showLoader\"></div>\n            <div class=\"ui-table-loading-content\" *ngIf=\"loading && showLoader\">\n                <i [class]=\"'ui-table-loading-icon pi-spin ' + loadingIcon\"></i>\n            </div>\n            <div *ngIf=\"captionTemplate\" class=\"ui-table-caption ui-widget-header\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\" [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\"></p-paginator>\n            \n            <div class=\"ui-table-wrapper\" *ngIf=\"!scrollable\">\n                <table role=\"grid\" #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"ui-table-thead\">\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tbody class=\"ui-table-tbody\" [pTableBody]=\"columns\" [pTableBodyTemplate]=\"bodyTemplate\"></tbody>\n                    <tfoot *ngIf=\"footerTemplate\" class=\"ui-table-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n\n            <div class=\"ui-table-scrollable-wrapper\" *ngIf=\"scrollable\">\n               <div class=\"ui-table-scrollable-view ui-table-frozen-view\" *ngIf=\"frozenColumns||frozenBodyTemplate\" [pScrollableView]=\"frozenColumns\" [frozen]=\"true\" [ngStyle]=\"{width: frozenWidth}\" [scrollHeight]=\"scrollHeight\"></div>\n               <div class=\"ui-table-scrollable-view\" [pScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{left: frozenWidth, width: 'calc(100% - '+frozenWidth+')'}\"></div>\n            </div>\n            \n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"ui-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\" [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\"></p-paginator>\n            \n                <div *ngIf=\"summaryTemplate\" class=\"ui-table-summary ui-widget-header\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper class=\"ui-column-resizer-helper ui-state-highlight\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down ui-table-reorder-indicator-up\" style=\"display:none\" *ngIf=\"reorderableColumns\"></span>\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up ui-table-reorder-indicator-down\" style=\"display:none\" *ngIf=\"reorderableColumns\"></span>\n        </div>\n    `,\n    providers: [TableService]\n})\nexport class Table implements OnInit, AfterViewInit, AfterContentInit, BlockableUI, OnChanges {\n    \n    @Input() frozenColumns: any[];\n\n    @Input() frozenValue: any[];\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n    \n    @Input() tableStyle: any;\n    \n    @Input() tableStyleClass: string;\n\n    @Input() paginator: boolean;\n\n    @Input() pageLinks: number = 5;\n\n    @Input() rowsPerPageOptions: any[];\n\n    @Input() alwaysShowPaginator: boolean = true;\n\n    @Input() paginatorPosition: string = 'bottom';\n\n    @Input() paginatorDropdownAppendTo: any;\n\n    @Input() paginatorDropdownScrollHeight: string = '200px';\n\n    @Input() currentPageReportTemplate: string = '{currentPage} of {totalPages}';\n\n    @Input() showCurrentPageReport: boolean;\n\n    @Input() defaultSortOrder: number = 1;\n\n    @Input() sortMode: string = 'single';\n    \n    @Input() resetPageOnSort: boolean = true;\n\n    @Input() selectionMode: string;\n\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelection: any;\n\n    @Output() contextMenuSelectionChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() contextMenuSelectionMode: string = \"separate\";\n\n    @Input() dataKey: string;\n\n    @Input() metaKeySelection: boolean;\n\n    @Input() rowTrackBy: Function = (index: number, item: any) => item;\n\n    @Input() lazy: boolean = false;\n\n    @Input() lazyLoadOnInit: boolean = true;\n\n    @Input() compareSelectionBy: string = 'deepEquals';\n\n    @Input() csvSeparator: string = ',';\n\n    @Input() exportFilename: string = 'download';\n\n    @Input() filters: { [s: string]: FilterMetadata; } = {};\n\n    @Input() globalFilterFields: string[];\n\n    @Input() filterDelay: number = 300;\n\n    @Input() expandedRowKeys: { [s: string]: boolean; } = {};\n\n    @Input() editingRowKeys: { [s: string]: boolean; } = {};\n\n    @Input() rowExpandMode: string = 'multiple';\n\n    @Input() scrollable: boolean;\n\n    @Input() scrollHeight: string;\n\n    @Input() virtualScroll: boolean;\n\n    @Input() virtualScrollDelay: number = 150;\n\n    @Input() virtualRowHeight: number = 28;\n\n    @Input() frozenWidth: string;\n\n    @Input() responsive: boolean;\n\n    @Input() contextMenu: any;\n    \n    @Input() resizableColumns: boolean;\n\n    @Input() columnResizeMode: string = 'fit';\n\n    @Input() reorderableColumns: boolean;\n\n    @Input() loading: boolean;\n\n    @Input() loadingIcon: string = 'pi pi-spinner';\n\n    @Input() showLoader: boolean = true;\n\n    @Input() rowHover: boolean;\n\n    @Input() customSort: boolean;\n\n    @Input() autoLayout: boolean;\n    \n    @Input() exportFunction;\n\n    @Input() stateKey: string;\n\n    @Input() stateStorage: string = 'session';\n\n    @Input() editMode: string = 'cell';\n\n    @Output() onRowSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onRowUnselect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onPage: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSort: EventEmitter<any> = new EventEmitter();\n\n    @Output() onFilter: EventEmitter<any> = new EventEmitter();\n\n    @Output() onLazyLoad: EventEmitter<any> = new EventEmitter();\n\n    @Output() onRowExpand: EventEmitter<any> = new EventEmitter();\n\n    @Output() onRowCollapse: EventEmitter<any> = new EventEmitter();\n\n    @Output() onContextMenuSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColResize: EventEmitter<any> = new EventEmitter();\n\n    @Output() onColReorder: EventEmitter<any> = new EventEmitter();\n\n    @Output() onRowReorder: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditInit: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditComplete: EventEmitter<any> = new EventEmitter();\n\n    @Output() onEditCancel: EventEmitter<any> = new EventEmitter();\n\n    @Output() onHeaderCheckboxToggle: EventEmitter<any> = new EventEmitter();\n\n    @Output() sortFunction: EventEmitter<any> = new EventEmitter();\n\n    @Output() firstChange: EventEmitter<number> = new EventEmitter();\n\n    @Output() rowsChange: EventEmitter<number> = new EventEmitter();\n\n    @Output() onStateSave: EventEmitter<any> = new EventEmitter();\n\n    @Output() onStateRestore: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('container', { static: false }) containerViewChild: ElementRef;\n\n    @ViewChild('resizeHelper', { static: false }) resizeHelperViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorUp', { static: false }) reorderIndicatorUpViewChild: ElementRef;\n\n    @ViewChild('reorderIndicatorDown', { static: false }) reorderIndicatorDownViewChild: ElementRef;\n\n    @ViewChild('table', { static: false }) tableViewChild: ElementRef;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    _value: any[] = [];\n\n    _columns: any[];\n\n    _totalRecords: number = 0;\n\n    _first: number = 0;\n\n    _rows: number;\n\n    filteredValue: any[];\n\n    headerTemplate: TemplateRef<any>;\n\n    bodyTemplate: TemplateRef<any>;\n\n    loadingBodyTemplate: TemplateRef<any>;\n\n    captionTemplate: TemplateRef<any>;\n\n    frozenRowsTemplate: TemplateRef<any>;\n\n    footerTemplate: TemplateRef<any>;\n\n    summaryTemplate: TemplateRef<any>;\n\n    colGroupTemplate: TemplateRef<any>;\n\n    expandedRowTemplate: TemplateRef<any>;\n\n    frozenHeaderTemplate: TemplateRef<any>;\n\n    frozenBodyTemplate: TemplateRef<any>;\n\n    frozenFooterTemplate: TemplateRef<any>;\n\n    frozenColGroupTemplate: TemplateRef<any>;\n\n    emptyMessageTemplate: TemplateRef<any>;\n\n    paginatorLeftTemplate: TemplateRef<any>;\n\n    paginatorRightTemplate: TemplateRef<any>;\n\n    selectionKeys: any = {};\n\n    lastResizerHelperX: number;\n\n    reorderIconWidth: number;\n\n    reorderIconHeight: number;\n\n    draggedColumn: any;\n\n    draggedRowIndex: number;\n\n    droppedRowIndex: number;\n\n    rowDragging: boolean;\n\n    dropPosition: number;\n\n    editingCell: Element;\n\n    editingCellData: any;\n\n    editingCellField: any;\n\n    editingCellClick: boolean;\n\n    documentEditListener: any;\n\n    _multiSortMeta: SortMeta[];\n\n    _sortField: string;\n\n    _sortOrder: number = 1;\n\n    virtualScrollTimer: any;\n    \n    virtualScrollCallback: Function;\n\n    preventSelectionSetterPropagation: boolean;\n\n    _selection: any;\n\n    anchorRowIndex: number;\n    \n    rangeRowIndex: number;\n\n    filterTimeout: any;\n\n    initialized: boolean;\n\n    rowTouched: boolean;\n\n    restoringSort: boolean;\n\n    restoringFilter: boolean;\n\n    stateRestored: boolean;\n\n    columnOrderStateRestored: boolean;\n\n    columnWidthsState: string;\n\n    tableWidthState: string;\n\n    constructor(public el: ElementRef, public zone: NgZone, public tableService: TableService, public cd: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        if (this.lazy && this.lazyLoadOnInit) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            if (this.restoringFilter) {\n                this.restoringFilter = false;\n            }\n        }\n\n        this.initialized = true;\n    }\n \n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'caption':\n                    this.captionTemplate = item.template;\n                break;\n\n                case 'header':\n                    this.headerTemplate = item.template;\n                break;\n\n                case 'body':\n                    this.bodyTemplate = item.template;\n                break;\n\n                case 'loadingbody':\n                    this.loadingBodyTemplate = item.template;\n                break;\n\n                case 'footer':\n                    this.footerTemplate = item.template;\n                break;\n\n                case 'summary':\n                    this.summaryTemplate = item.template;\n                break;\n\n                case 'colgroup':\n                    this.colGroupTemplate = item.template;\n                break;\n\n                case 'rowexpansion':\n                    this.expandedRowTemplate = item.template;\n                break;\n\n                case 'frozenrows':\n                    this.frozenRowsTemplate = item.template;\n                break;\n\n                case 'frozenheader':\n                    this.frozenHeaderTemplate = item.template;\n                break;\n\n                case 'frozenbody':\n                    this.frozenBodyTemplate = item.template;\n                break;\n\n                case 'frozenfooter':\n                    this.frozenFooterTemplate = item.template;\n                break;\n\n                case 'frozencolgroup':\n                    this.frozenColGroupTemplate = item.template;\n                break;\n\n                case 'emptymessage':\n                    this.emptyMessageTemplate = item.template;\n                break;\n\n                case 'paginatorleft':\n                    this.paginatorLeftTemplate = item.template;\n                break;\n\n                case 'paginatorright':\n                    this.paginatorRightTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    ngAfterViewInit() {\n        if (this.isStateful() && this.resizableColumns) {\n            this.restoreColumnWidths();\n        }\n    }\n\n    ngOnChanges(simpleChange: SimpleChanges) {\n        if (simpleChange.value) {\n            if (this.isStateful() && !this.stateRestored) {\n                this.restoreState();\n            }\n    \n            this._value = simpleChange.value.currentValue;\n            \n            if (!this.lazy) {\n                this.totalRecords = (this._value ? this._value.length : 0);\n                \n                if (this.sortMode == 'single' && this.sortField)\n                    this.sortSingle();\n                else if (this.sortMode == 'multiple' && this.multiSortMeta)\n                    this.sortMultiple();\n                else if (this.hasFilter())       //sort already filters\n                    this._filter();\n            }\n    \n            if (this.virtualScroll && this.virtualScrollCallback) {\n                this.virtualScrollCallback();\n            }\n    \n            this.tableService.onValueChange(simpleChange.value.currentValue);\n        }\n\n        if (simpleChange.columns) {\n            this._columns = simpleChange.columns.currentValue;\n            this.tableService.onColumnsChange(simpleChange.columns.currentValue);\n\n            if (this._columns && this.isStateful() && this.reorderableColumns && !this.columnOrderStateRestored ) {\n                this.restoreColumnOrder();\n            }\n        }\n\n        if (simpleChange.sortField) {\n            this._sortField = simpleChange.sortField.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.sortOrder) {\n            this._sortOrder = simpleChange.sortOrder.currentValue;\n\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if ( !this.lazy || this.initialized ) {\n                if (this.sortMode === 'single') {\n                    this.sortSingle();\n                }\n            }\n        }\n\n        if (simpleChange.multiSortMeta) {\n            this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n            if (this.sortMode === 'multiple') {\n                this.sortMultiple();\n            }\n        }\n\n        if (simpleChange.selection) {\n            this._selection = simpleChange.selection.currentValue;\n\n            if (!this.preventSelectionSetterPropagation) {\n                this.updateSelectionKeys();\n                this.tableService.onSelectionChange();\n            }\n            this.preventSelectionSetterPropagation = false;\n        }\n    }\n\n    @Input() get value(): any[] {\n        return this._value;\n    }\n    set value(val: any[]) {\n        this._value = val;\n    }\n\n    @Input() get columns(): any[] {\n        return this._columns;\n    }\n    set columns(cols: any[]) {\n        this._columns = cols;\n    }\n\n    @Input() get first(): number {\n        return this._first;\n    }\n    set first(val: number) {\n        this._first = val;\n    }\n\n    @Input() get rows(): number {\n        return this._rows;\n    }\n    set rows(val: number) {\n        this._rows = val;\n    }\n\n    @Input() get totalRecords(): number {\n        return this._totalRecords;\n    }\n    set totalRecords(val: number) {\n        this._totalRecords = val;\n        this.tableService.onTotalRecordsChange(this._totalRecords);\n    }\n\n    @Input() get sortField(): string {\n        return this._sortField;\n    }\n\n    set sortField(val: string) {\n        this._sortField = val;\n    }\n\n    @Input() get sortOrder(): number {\n        return this._sortOrder;\n    }\n    set sortOrder(val: number) {\n        this._sortOrder = val;\n    }\n\n    @Input() get multiSortMeta(): SortMeta[] {\n        return this._multiSortMeta;\n    }\n\n    set multiSortMeta(val: SortMeta[]) {\n        this._multiSortMeta = val;\n    }\n\n    @Input() get selection(): any {\n        return this._selection;\n    }\n\n    set selection(val: any) {\n        this._selection = val;        \n    }\n\n    updateSelectionKeys() {\n        if (this.dataKey && this._selection) {\n            this.selectionKeys = {};\n            if (Array.isArray(this._selection)) {\n                for(let data of this._selection) {\n                    this.selectionKeys[String(ObjectUtils.resolveFieldData(data, this.dataKey))] = 1;\n                }\n            }\n            else {\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection, this.dataKey))] = 1;\n            }\n        }\n    }\n\n    onPageChange(event) {\n        this.first = event.first;\n        this.rows = event.rows;\n\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n\n        this.onPage.emit({\n            first: this.first,\n            rows: this.rows\n        });\n        \n        this.firstChange.emit(this.first);\n        this.rowsChange.emit(this.rows);\n        this.tableService.onValueChange(this.value);\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n\n        this.anchorRowIndex = null;\n    }\n\n    sort(event) {\n        let originalEvent = event.originalEvent;\n\n        if (this.sortMode === 'single') {\n            this._sortOrder = (this.sortField === event.field) ? this.sortOrder * -1 : this.defaultSortOrder;\n            this._sortField = event.field;\n            this.sortSingle();\n\n            if (this.resetPageOnSort) {\n                this.first = 0;\n                this.firstChange.emit(this.first);\n            }\n        }\n        if (this.sortMode === 'multiple') {\n            let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n            let sortMeta = this.getSortMeta(event.field);\n\n            if (sortMeta) {\n                if (!metaKey) {\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }]\n                }\n                else {\n                    sortMeta.order = sortMeta.order * -1;\n                }\n            }\n            else {\n                if (!metaKey || !this.multiSortMeta) {\n                    this._multiSortMeta = [];\n                }\n                this._multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\n            }\n            \n            this.sortMultiple();\n        }\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n\n        this.anchorRowIndex = null;\n    }\n\n    sortSingle() {\n        if (this.sortField && this.sortOrder) {\n            if (this.restoringSort) {\n                this.restoringSort = false;\n            }\n\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                if (this.customSort) {\n                    this.sortFunction.emit({\n                        data: this.value,\n                        mode: this.sortMode,\n                        field: this.sortField,\n                        order: this.sortOrder\n                    });\n                }\n                else {\n                    this.value.sort((data1, data2) => {\n                        let value1 = ObjectUtils.resolveFieldData(data1, this.sortField);\n                        let value2 = ObjectUtils.resolveFieldData(data2, this.sortField);\n                        let result = null;\n        \n                        if (value1 == null && value2 != null)\n                            result = -1;\n                        else if (value1 != null && value2 == null)\n                            result = 1;\n                        else if (value1 == null && value2 == null)\n                            result = 0;\n                        else if (typeof value1 === 'string' && typeof value2 === 'string')\n                            result = value1.localeCompare(value2);\n                        else\n                            result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\n        \n                        return (this.sortOrder * result);\n                    });\n                }\n                \n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n    \n            let sortMeta: SortMeta = {\n                field: this.sortField,\n                order: this.sortOrder\n            };\n    \n            this.onSort.emit(sortMeta);\n            this.tableService.onSort(sortMeta);\n        }\n    }\n\n    sortMultiple() {\n        if (this.multiSortMeta) {\n            if (this.lazy) {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }\n            else if (this.value) {\n                if (this.customSort) {\n                    this.sortFunction.emit({\n                        data: this.value,\n                        mode: this.sortMode,\n                        multiSortMeta: this.multiSortMeta\n                    });\n                }\n                else {\n                    this.value.sort((data1, data2) => {\n                        return this.multisortField(data1, data2, this.multiSortMeta, 0);\n                    });\n                }\n\n                if (this.hasFilter()) {\n                    this._filter();\n                }\n            }\n            \n            this.onSort.emit({\n                multisortmeta: this.multiSortMeta\n            });\n            this.tableService.onSort(this.multiSortMeta);\n        }\n    }\n\n    multisortField(data1, data2, multiSortMeta, index) {\n        let value1 = ObjectUtils.resolveFieldData(data1, multiSortMeta[index].field);\n        let value2 = ObjectUtils.resolveFieldData(data2, multiSortMeta[index].field);\n        let result = null;\n\n        if (value1 == null && value2 != null)\n            result = -1;\n        else if (value1 != null && value2 == null)\n            result = 1;\n        else if (value1 == null && value2 == null)\n            result = 0;\n        else if (typeof value1 == 'string' || value1 instanceof String) {\n            if (value1.localeCompare && (value1 != value2)) {\n                return (multiSortMeta[index].order * value1.localeCompare(value2));\n            }\n        }\n        else {\n            result = (value1 < value2) ? -1 : 1;\n        }\n\n        if (value1 == value2) {\n            return (multiSortMeta.length - 1) > (index) ? (this.multisortField(data1, data2, multiSortMeta, index + 1)) : 0;\n        }\n\n        return (multiSortMeta[index].order * result);\n    }\n\n    getSortMeta(field: string) {\n        if (this.multiSortMeta && this.multiSortMeta.length) {\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\n                if (this.multiSortMeta[i].field === field) {\n                    return this.multiSortMeta[i];\n                }\n            }\n        }\n       \n        return null;\n    }\n\n    isSorted(field: string) {\n        if (this.sortMode === 'single') {\n            return (this.sortField && this.sortField === field);\n        }\n        else if (this.sortMode === 'multiple') {\n            let sorted = false;\n            if (this.multiSortMeta)Â {\n                for(let i = 0; i < this.multiSortMeta.length; i++) {\n                    if (this.multiSortMeta[i].field == field)Â {\n                        sorted = true;\n                        break;\n                    }\n                }\n            }\n            return sorted;\n        }\n    }\n\n    handleRowClick(event) {\n        let target = (<HTMLElement> event.originalEvent.target);\n        let targetNode = target.nodeName;\n        let parentNode = target.parentElement && target.parentElement.nodeName;\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || \n            parentNode == 'INPUT' || parentNode == 'BUTTON' || parentNode == 'A' ||\n            (DomHandler.hasClass(event.originalEvent.target, 'ui-clickable'))) {\n            return;\n        }\n\n        if (this.selectionMode) {\n            this.preventSelectionSetterPropagation = true;\n            if (this.isMultipleSelectionMode() && event.originalEvent.shiftKey && this.anchorRowIndex != null) {\n                DomHandler.clearSelection();\n                if (this.rangeRowIndex != null) {\n                    this.clearSelectionRange(event.originalEvent);\n                }\n                \n                this.rangeRowIndex = event.rowIndex;\n                this.selectRange(event.originalEvent, event.rowIndex);\n            }\n            else {\n                let rowData = event.rowData;\n                let selected = this.isSelected(rowData);\n                let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\n                this.anchorRowIndex = event.rowIndex;\n                this.rangeRowIndex = event.rowIndex;\n\n                if (metaSelection) {\n                    let metaKey = event.originalEvent.metaKey||event.originalEvent.ctrlKey;\n                    \n                    if (selected && metaKey) {\n                        if (this.isSingleSelectionMode()) {\n                            this._selection = null;\n                            this.selectionKeys = {};\n                            this.selectionChange.emit(null);\n                        }\n                        else {\n                            let selectionIndex = this.findIndexInSelection(rowData);\n                            this._selection = this.selection.filter((val,i) => i!=selectionIndex);\n                            this.selectionChange.emit(this.selection);\n                            if (dataKeyValue) {\n                                delete this.selectionKeys[dataKeyValue];\n                            }\n                        }\n                        \n                        this.onRowUnselect.emit({originalEvent: event.originalEvent, data: rowData, type: 'row'});\n                    }\n                    else {\n                        if (this.isSingleSelectionMode()) {\n                            this._selection = rowData;\n                            this.selectionChange.emit(rowData);\n                            if (dataKeyValue) {\n                                this.selectionKeys = {};\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n                        else if (this.isMultipleSelectionMode()) {\n                            if (metaKey) {\n                                this._selection = this.selection||[];\n                            }\n                            else {\n                                this._selection = [];\n                                this.selectionKeys = {};\n                            }\n\n                            this._selection = [...this.selection,rowData];\n                            this.selectionChange.emit(this.selection);\n                            if (dataKeyValue) {\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n\n                        this.onRowSelect.emit({originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex});\n                    }\n                }\n                else {\n                    if (this.selectionMode === 'single') {\n                        if (selected) {\n                            this._selection = null;\n                            this.selectionKeys = {};\n                            this.selectionChange.emit(this.selection);\n                            this.onRowUnselect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row' });\n                        }\n                        else {\n                            this._selection = rowData;\n                            this.selectionChange.emit(this.selection);\n                            this.onRowSelect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex });\n                            if (dataKeyValue) {\n                                this.selectionKeys = {};\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n                    }\n                    else if (this.selectionMode === 'multiple') {\n                        if (selected) {\n                            let selectionIndex = this.findIndexInSelection(rowData);\n                            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n                            this.selectionChange.emit(this.selection);\n                            this.onRowUnselect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row' });\n                            if (dataKeyValue) {\n                                delete this.selectionKeys[dataKeyValue];\n                            }\n                        }\n                        else {\n                            this._selection = this.selection ? [...this.selection, rowData] : [rowData];\n                            this.selectionChange.emit(this.selection);\n                            this.onRowSelect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex });\n                            if (dataKeyValue) {\n                                this.selectionKeys[dataKeyValue] = 1;\n                            }\n                        }\n                    }\n                }\n            }\n\n            this.tableService.onSelectionChange();\n\n            if (this.isStateful()) {\n                this.saveState();\n            }\n        }\n\n        this.rowTouched = false;\n    }\n\n    handleRowTouchEnd(event) {\n        this.rowTouched = true;\n    }\n\n    handleRowRightClick(event) {\n        if (this.contextMenu) {\n            const rowData = event.rowData;\n\n            if (this.contextMenuSelectionMode === 'separate') {\n                this.contextMenuSelection = rowData;\n                this.contextMenuSelectionChange.emit(rowData);\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, data: rowData, index: event.rowIndex});\n                this.contextMenu.show(event.originalEvent);\n                this.tableService.onContextMenu(rowData);\n            }\n            else if (this.contextMenuSelectionMode === 'joint') {\n                this.preventSelectionSetterPropagation = true;\n                let selected = this.isSelected(rowData);\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\n                \n                if (!selected) {\n                    if (this.isSingleSelectionMode()) {\n                        this.selection = rowData;\n                        this.selectionChange.emit(rowData);\n                    }\n                    else if (this.isMultipleSelectionMode()) {\n                        this.selection = [rowData];\n                        this.selectionChange.emit(this.selection);\n                    }\n                    \n                    if (dataKeyValue) {\n                        this.selectionKeys[dataKeyValue] = 1;\n                    }\n                }\n    \n                this.contextMenu.show(event.originalEvent);\n                this.onContextMenuSelect.emit({originalEvent: event, data: rowData, index: event.rowIndex});\n            }\n        }\n    }\n\n    selectRange(event: MouseEvent, rowIndex: number) {\n        let rangeStart, rangeEnd;\n        \n        if (this.anchorRowIndex > rowIndex) {\n            rangeStart = rowIndex;\n            rangeEnd = this.anchorRowIndex;\n        }\n        else if (this.anchorRowIndex < rowIndex) {\n            rangeStart = this.anchorRowIndex;\n            rangeEnd = rowIndex;\n        }\n        else {\n            rangeStart = rowIndex;\n            rangeEnd = rowIndex;\n        }\n        \n        if (this.lazy && this.paginator) {\n            rangeStart -= this.first;\n            rangeEnd -= this.first;\n        }\n\n        for(let i = rangeStart; i <= rangeEnd; i++) {\n            let rangeRowData = this.filteredValue ? this.filteredValue[i] : this.value[i];\n            if (!this.isSelected(rangeRowData)) {\n                this._selection = [...this.selection, rangeRowData];\n                let dataKeyValue: string = this.dataKey ? String(ObjectUtils.resolveFieldData(rangeRowData, this.dataKey)) : null;\n                if (dataKeyValue) {\n                    this.selectionKeys[dataKeyValue] = 1;\n                }\n                this.onRowSelect.emit({originalEvent: event, data: rangeRowData, type: 'row'});\n            }\n        }\n\n        this.selectionChange.emit(this.selection);\n    }\n\n    clearSelectionRange(event: MouseEvent) {\n        let rangeStart, rangeEnd;\n\n        if (this.rangeRowIndex > this.anchorRowIndex) {\n            rangeStart = this.anchorRowIndex;\n            rangeEnd = this.rangeRowIndex;\n        }\n        else if (this.rangeRowIndex < this.anchorRowIndex) {\n            rangeStart = this.rangeRowIndex;\n            rangeEnd = this.anchorRowIndex;\n        }\n        else {\n            rangeStart = this.rangeRowIndex;\n            rangeEnd = this.rangeRowIndex;\n        }\n        \n        for(let i = rangeStart; i <= rangeEnd; i++) {\n            let rangeRowData = this.value[i];\n            let selectionIndex = this.findIndexInSelection(rangeRowData);\n            this._selection = this.selection.filter((val,i) => i!=selectionIndex);\n            let dataKeyValue: string = this.dataKey ? String(ObjectUtils.resolveFieldData(rangeRowData, this.dataKey)) : null;\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n            this.onRowUnselect.emit({originalEvent: event, data: rangeRowData, type: 'row'});\n        }\n    }\n\n    isSelected(rowData) {\n        if (rowData && this.selection) {\n            if (this.dataKey) {\n                return this.selectionKeys[ObjectUtils.resolveFieldData(rowData, this.dataKey)] !== undefined;\n            }\n            else {\n                if (this.selection instanceof Array)\n                    return this.findIndexInSelection(rowData) > -1;\n                else\n                    return this.equals(rowData, this.selection);\n            }\n        }\n\n        return false;\n    }\n\n    findIndexInSelection(rowData: any) {\n        let index: number = -1;\n        if (this.selection && this.selection.length) {\n            for (let i = 0; i < this.selection.length; i++) {\n                if (this.equals(rowData, this.selection[i])) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n\n        return index;\n    }\n\n    toggleRowWithRadio(event: any, rowData:any) {\n        this.preventSelectionSetterPropagation = true;\n\n        if (this.selection != rowData) {\n            this._selection = rowData;\n            this.selectionChange.emit(this.selection);\n            this.onRowSelect.emit({originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'radiobutton'});\n            \n            if (this.dataKey) {\n                this.selectionKeys = {};\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] = 1;\n            }\n        }\n        else {\n            this._selection = null;\n            this.selectionChange.emit(this.selection);\n            this.onRowUnselect.emit({originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'radiobutton'});\n        }\n\n        this.tableService.onSelectionChange();\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n\n    toggleRowWithCheckbox(event, rowData: any) {\n        this.selection = this.selection||[];\n        let selected = this.isSelected(rowData);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\n        this.preventSelectionSetterPropagation = true;\n\n        if (selected) {\n            let selectionIndex = this.findIndexInSelection(rowData);\n            this._selection = this.selection.filter((val, i) => i != selectionIndex);\n            this.selectionChange.emit(this.selection);\n            this.onRowUnselect.emit({ originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'checkbox' });\n            if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n            }\n        }\n        else {\n            this._selection = this.selection ? [...this.selection, rowData] : [rowData];\n            this.selectionChange.emit(this.selection);\n            this.onRowSelect.emit({ originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'checkbox' });\n            if (dataKeyValue) {\n                this.selectionKeys[dataKeyValue] = 1;\n            }\n        }\n\n        this.tableService.onSelectionChange();\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n\n    toggleRowsWithCheckbox(event: Event, check: boolean) {\n        this._selection = check ? this.filteredValue ? this.filteredValue.slice(): this.value.slice() : [];\n        this.preventSelectionSetterPropagation = true;\n        this.updateSelectionKeys();\n        this.selectionChange.emit(this._selection);\n        this.tableService.onSelectionChange();\n        this.onHeaderCheckboxToggle.emit({originalEvent: event, checked: check});\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n\n    equals(data1, data2) {\n        return this.compareSelectionBy === 'equals' ? (data1 === data2) : ObjectUtils.equals(data1, data2, this.dataKey);\n    }\n\n    filter(value, field, matchMode) {\n        if (this.filterTimeout) {\n            clearTimeout(this.filterTimeout);\n        }\n        \n        if (!this.isFilterBlank(value)) {\n            this.filters[field] = { value: value, matchMode: matchMode };\n        } else if (this.filters[field]) {\n            delete this.filters[field];\n        }\n        \n        this.filterTimeout = setTimeout(() => {\n            this._filter();\n            this.filterTimeout = null;\n        }, this.filterDelay);\n\n        this.anchorRowIndex = null;\n    }\n\n    filterGlobal(value, matchMode) {\n        this.filter(value, 'global', matchMode);\n    }\n\n    isFilterBlank(filter: any): boolean {\n        if (filter !== null && filter !== undefined) {\n            if ((typeof filter === 'string' && filter.trim().length == 0) || (filter instanceof Array && filter.length == 0))\n                return true;\n            else\n                return false;\n        }\n        return true;\n    }\n\n    _filter() {\n        if (!this.restoringFilter) {\n            this.first = 0;\n            this.firstChange.emit(this.first);\n        }\n\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            if (!this.value) {\n                return;\n            }\n\n            if (!this.hasFilter()) {\n                this.filteredValue = null;\n                if (this.paginator) {\n                    this.totalRecords = this.value ? this.value.length : 0;\n                }\n            }\n            else {\n                let globalFilterFieldsArray;\n                if (this.filters['global']) {\n                    if (!this.columns && !this.globalFilterFields)\n                        throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');\n                    else\n                        globalFilterFieldsArray = this.globalFilterFields||this.columns;\n                }\n                \n                this.filteredValue = [];\n\n                for (let i = 0; i < this.value.length; i++) {\n                    let localMatch = true;\n                    let globalMatch = false;\n                    let localFiltered = false;\n    \n                    for (let prop in this.filters) {\n                        if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n                            localFiltered = true;\n                            let filterMeta = this.filters[prop];\n                            let filterField = prop;\n                            let filterValue = filterMeta.value;\n                            let filterMatchMode = filterMeta.matchMode || 'startsWith';\n                            let dataFieldValue = ObjectUtils.resolveFieldData(this.value[i], filterField);\n                            let filterConstraint = FilterUtils[filterMatchMode];\n    \n                            if (!filterConstraint(dataFieldValue, filterValue)) {\n                                localMatch = false;\n                            }\n    \n                            if (!localMatch) {\n                                break;\n                            }\n                        }\n                    }\n    \n                    if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n                        for(let j = 0; j < globalFilterFieldsArray.length; j++) {\n                            let globalFilterField = globalFilterFieldsArray[j].field||globalFilterFieldsArray[j];\n                            globalMatch = FilterUtils[this.filters['global'].matchMode](ObjectUtils.resolveFieldData(this.value[i], globalFilterField), this.filters['global'].value);\n                            \n                            if (globalMatch) {\n                                break;\n                            }\n                        }\n                    }\n    \n                    let matches: boolean;\n                    if (this.filters['global']) {\n                        matches = localFiltered ? (localFiltered && localMatch && globalMatch) : globalMatch;\n                    }\n                    else {\n                        matches = localFiltered && localMatch;\n                    }\n    \n                    if (matches) {\n                        this.filteredValue.push(this.value[i]);\n                    }\n                }\n    \n                if (this.filteredValue.length === this.value.length) {\n                    this.filteredValue = null;\n                }\n    \n                if (this.paginator) {\n                    this.totalRecords = this.filteredValue ? this.filteredValue.length : this.value ? this.value.length : 0;\n                }\n            }\n        }\n\n        this.onFilter.emit({\n            filters: this.filters,\n            filteredValue: this.filteredValue || this.value\n        });\n\n        this.tableService.onValueChange(this.value);\n\n        if (this.isStateful() && !this.restoringFilter) {\n            this.saveState();\n        }\n\n        if (this.restoringFilter) {\n            this.restoringFilter = false;\n        }\n\n        this.cd.detectChanges();\n    }\n\n    hasFilter() {\n        let empty = true;\n        for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop)) {\n                empty = false;\n                break;\n            }\n        }\n\n        return !empty;\n    }\n\n    createLazyLoadMetadata(): any {\n        return {\n            first: this.first,\n            rows: this.virtualScroll ? this.rows * 2: this.rows,\n            sortField: this.sortField,\n            sortOrder: this.sortOrder,\n            filters: this.filters,\n            globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n            multiSortMeta: this.multiSortMeta\n        };\n    }\n\n    public reset() {\n        this._sortField = null;\n        this._sortOrder = this.defaultSortOrder;\n        this._multiSortMeta = null;\n        this.tableService.onSort(null);\n        \n        this.filteredValue = null;\n        this.filters = {};\n        \n        this.first = 0;\n        this.firstChange.emit(this.first);\n        \n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else {\n            this.totalRecords = (this._value ? this._value.length : 0);\n        }\n    }\n\n    public exportCSV(options?: any) {\n        let data = this.filteredValue || this.value;\n        let csv = '';\n\n        if (options && options.selectionOnly) {\n            data = this.selection || [];\n        }\n        \n        //headers\n        for (let i = 0; i < this.columns.length; i++) {\n            let column = this.columns[i];\n            if (column.exportable !== false && column.field) {\n                csv += '\"' + (column.header || column.field) + '\"';\n\n                if (i < (this.columns.length - 1)) {\n                    csv += this.csvSeparator;\n                }\n            }\n        }\n\n        //body\n        data.forEach((record, i) => {\n            csv += '\\n';\n            for (let i = 0; i < this.columns.length; i++) {\n                let column = this.columns[i];\n                if (column.exportable !== false && column.field) {\n                    let cellData = ObjectUtils.resolveFieldData(record, column.field);\n                    \n                    if (cellData != null) {\n                        if (this.exportFunction) {\n                            cellData = this.exportFunction({\n                                data: cellData,\n                                field: column.field\n                            });\n                        }\n                        else\n                            cellData = String(cellData).replace(/\"/g, '\"\"');\n                    }\n                    else\n                        cellData = '';\n        \n        \n                    csv += '\"' + cellData + '\"';\n        \n                    if (i < (this.columns.length - 1)) {\n                        csv += this.csvSeparator;\n                    }\n                }\n            }\n        });\n\n        let blob = new Blob([csv], {\n            type: 'text/csv;charset=utf-8;'\n        });\n\n        if (window.navigator.msSaveOrOpenBlob) {\n            navigator.msSaveOrOpenBlob(blob, this.exportFilename + '.csv');\n        }\n        else {\n            let link = document.createElement(\"a\");\n            link.style.display = 'none';\n            document.body.appendChild(link);\n            if (link.download !== undefined) {\n                link.setAttribute('href', URL.createObjectURL(blob));\n                link.setAttribute('download', this.exportFilename + '.csv');\n                link.click();\n            }\n            else {\n                csv = 'data:text/csv;charset=utf-8,' + csv;\n                window.open(encodeURI(csv));\n            }\n            document.body.removeChild(link);\n        }\n    }\n\n    updateEditingCell(cell, data, field) {\n        this.editingCell = cell;\n        this.editingCellData = data;\n        this.editingCellField = field;\n        this.bindDocumentEditListener();\n    }\n\n    isEditingCellValid() {\n        return (this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0);\n    }\n\n    bindDocumentEditListener() {\n        if (!this.documentEditListener) {\n            this.documentEditListener = (event) => {\n                if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\n                    DomHandler.removeClass(this.editingCell, 'ui-editing-cell');\n                    this.editingCell = null;\n                    this.onEditComplete.emit({ field: this.editingCellField, data: this.editingCellData, originalEvent: event });\n                    this.editingCellField = null;\n                    this.editingCellData = null;\n                    this.unbindDocumentEditListener();\n                }\n\n                this.editingCellClick = false;\n            };\n            \n            document.addEventListener('click', this.documentEditListener);\n        }\n    }\n     \n    unbindDocumentEditListener() {\n        if (this.documentEditListener) {\n            document.removeEventListener('click', this.documentEditListener);\n            this.documentEditListener = null;\n        }\n    }\n\n    initRowEdit(rowData: any) {\n        let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n        this.editingRowKeys[dataKeyValue] = true;\n    }\n\n    saveRowEdit(rowData: any, rowElement: HTMLTableRowElement) {\n        if (DomHandler.find(rowElement, '.ng-invalid.ng-dirty').length === 0) {\n            let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n            delete this.editingRowKeys[dataKeyValue];\n        }\n    }\n\n    cancelRowEdit(rowData: any) {\n        let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n        delete this.editingRowKeys[dataKeyValue];\n    }\n\n    toggleRow(rowData: any, event?: Event) {\n        if (!this.dataKey) {\n            throw new Error('dataKey must be defined to use row expansion');\n        }\n\n        let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n\n        if (this.expandedRowKeys[dataKeyValue] != null) {\n            delete this.expandedRowKeys[dataKeyValue];\n            this.onRowCollapse.emit({\n                originalEvent: event,\n                data: rowData\n            });\n        }\n        else {\n            if (this.rowExpandMode === 'single') {\n                this.expandedRowKeys = {};\n            }\n\n            this.expandedRowKeys[dataKeyValue] = true;\n            this.onRowExpand.emit({\n                originalEvent: event,\n                data: rowData\n            });\n        }\n\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (this.isStateful()) {\n            this.saveState();\n        }\n    }\n\n    isRowExpanded(rowData: any): boolean {\n        return this.expandedRowKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] === true;\n    }\n\n    isRowEditing(rowData: any): boolean {\n        return this.editingRowKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] === true;\n    }\n\n    isSingleSelectionMode() {\n        return this.selectionMode === 'single';\n    }\n\n    isMultipleSelectionMode() {\n        return this.selectionMode === 'multiple';\n    }\n\n    onColumnResizeBegin(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft);\n        event.preventDefault();\n    }\n\n    onColumnResize(event) {\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\n        DomHandler.addClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n        this.resizeHelperViewChild.nativeElement.style.left = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft) + 'px';\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\n    }\n\n    onColumnResizeEnd(event, column) {\n        let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\n        let columnWidth = column.offsetWidth;\n        let minWidth = parseInt(column.style.minWidth || 15);\n        \n        if (columnWidth + delta < minWidth) {\n            delta = minWidth - columnWidth;\n        }\n    \n        const newColumnWidth = columnWidth + delta;\n    \n        if (newColumnWidth >= minWidth) {\n            if (this.columnResizeMode === 'fit') {\n                let nextColumn = column.nextElementSibling;\n                while (!nextColumn.offsetParent) {\n                    nextColumn = nextColumn.nextElementSibling;\n                }\n\n                if (nextColumn) {\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\n                    let nextColumnMinWidth = nextColumn.style.minWidth || 15;\n\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\n                        if (this.scrollable) {\n                            let scrollableView = this.findParentScrollableView(column);\n                            let scrollableBodyTable = DomHandler.findSingle(scrollableView, 'table.ui-table-scrollable-body-table');\n                            let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.ui-table-scrollable-header-table');\n                            let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.ui-table-scrollable-footer-table');\n                            let resizeColumnIndex = DomHandler.index(column);\n\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n                        }\n                        else {\n                            column.style.width = newColumnWidth + 'px';\n                            if (nextColumn) {\n                                nextColumn.style.width = nextColumnWidth + 'px';\n                            }\n                        }\n                    }\n                }\n            }\n            else if (this.columnResizeMode === 'expand') {\n                if (newColumnWidth > minWidth) {\n                    if (this.scrollable) {\n                        this.setScrollableItemsWidthOnExpandResize(column, newColumnWidth, delta);\n                    }\n                    else {\n                        this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\n                        column.style.width = newColumnWidth + 'px';\n                        let containerWidth = this.tableViewChild.nativeElement.style.width;\n                        this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n                    }\n                }\n            }\n\n            this.onColResize.emit({\n                element: column,\n                delta: delta\n            });\n\n            if (this.isStateful()) {\n                this.saveState();\n            }\n        }\n\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\n        DomHandler.removeClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');\n    }\n\n    setScrollableItemsWidthOnExpandResize(column, newColumnWidth, delta) {\n        let scrollableView = column ? this.findParentScrollableView(column) : this.containerViewChild.nativeElement;\n        let scrollableBody = DomHandler.findSingle(scrollableView, '.ui-table-scrollable-body');\n        let scrollableHeader = DomHandler.findSingle(scrollableView, '.ui-table-scrollable-header');\n        let scrollableFooter = DomHandler.findSingle(scrollableView, '.ui-table-scrollable-footer');\n        let scrollableBodyTable = DomHandler.findSingle(scrollableBody, 'table.ui-table-scrollable-body-table');\n        let scrollableHeaderTable = DomHandler.findSingle(scrollableHeader, 'table.ui-table-scrollable-header-table');\n        let scrollableFooterTable = DomHandler.findSingle(scrollableFooter, 'table.ui-table-scrollable-footer-table');\n\n        const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n        const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n        const isContainerInViewport = this.containerViewChild.nativeElement.offsetWidth >= scrollableBodyTableWidth;\n\n        let setWidth = (container, table, width, isContainerInViewport) => {\n            if (container && table) {\n                container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto'\n                table.style.width = width + 'px';\n            }\n        };\n\n        setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n        setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n        setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n    \n        if (column) {\n            let resizeColumnIndex = DomHandler.index(column);\n\n            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n        }\n    }\n\n    findParentScrollableView(column) {\n        if (column) {\n            let parent = column.parentElement;\n            while (parent && !DomHandler.hasClass(parent, 'ui-table-scrollable-view')) {\n                parent = parent.parentElement;\n            }\n\n            return parent;\n        }\n        else {\n            return null;\n        }\n    }\n\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\n        if (table) {\n            let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n\n            if (colGroup) {\n                let col = colGroup.children[resizeColumnIndex];\n                let nextCol = col.nextElementSibling;\n                col.style.width = newColumnWidth + 'px';\n    \n                if (nextCol && nextColumnWidth) {\n                    nextCol.style.width = nextColumnWidth + 'px';\n                }\n            }\n            else {\n                throw \"Scrollable tables require a colgroup to support resizable columns\";\n            }\n        }\n    }\n\n    onColumnDragStart(event, columnElement) {\n        this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\n        this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\n        this.draggedColumn = columnElement;\n        event.dataTransfer.setData('text', 'b');    // For firefox\n    }\n\n    onColumnDragEnter(event, dropHeader) {\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n            event.preventDefault();\n            let containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\n            let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n\n            if (this.draggedColumn != dropHeader) {\n                let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'preorderablecolumn');\n                let dropIndex = DomHandler.indexWithinGroup(dropHeader, 'preorderablecolumn');\n                let targetLeft = dropHeaderOffset.left - containerOffset.left;\n                let targetTop = containerOffset.top - dropHeaderOffset.top;\n                let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n\n                if (event.pageX > columnCenter) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = 1;\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\n                    this.dropPosition = -1;\n                }\n\n                if ((dropIndex - dragIndex === 1 && this.dropPosition === -1) || (dropIndex - dragIndex === -1 && this.dropPosition === 1)) {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n                }\n                else {\n                    this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n                    this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n                }\n            }\n            else {\n                event.dataTransfer.dropEffect = 'none';\n            }\n        }\n    }\n\n    onColumnDragLeave(event) {\n        if (this.reorderableColumns && this.draggedColumn) {\n            event.preventDefault();\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n        }\n    }\n\n    onColumnDrop(event, dropColumn) {\n        event.preventDefault();\n        if (this.draggedColumn) {\n            let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'preorderablecolumn');\n            let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'preorderablecolumn');\n            let allowDrop = (dragIndex != dropIndex);\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\n                allowDrop = false;\n            }\n\n            if (allowDrop && ((dropIndex < dragIndex && this.dropPosition === 1))) {\n                dropIndex = dropIndex + 1;\n            }\n\n            if (allowDrop && ((dropIndex > dragIndex && this.dropPosition === -1))) {\n                dropIndex = dropIndex - 1;\n            }\n\n            if (allowDrop) {\n                ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n\n                this.onColReorder.emit({\n                    dragIndex: dragIndex,\n                    dropIndex: dropIndex,\n                    columns: this.columns\n                });\n\n                if (this.isStateful()) {\n                    this.zone.runOutsideAngular(() => {\n                        setTimeout(() => {\n                            this.saveState();\n                        });\n                    });\n                }\n            }\n\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n            this.draggedColumn.draggable = false;\n            this.draggedColumn = null;\n            this.dropPosition = null;\n        }\n    }\n\n    onRowDragStart(event, index) {\n        this.rowDragging = true;\n        this.draggedRowIndex = index;\n        event.dataTransfer.setData('text', 'b');    // For firefox\n    }\n\n    onRowDragOver(event, index, rowElement) {\n        if (this.rowDragging && this.draggedRowIndex !== index) {\n            let rowY = DomHandler.getOffset(rowElement).top + DomHandler.getWindowScrollTop();\n            let pageY = event.pageY;\n            let rowMidY = rowY + DomHandler.getOuterHeight(rowElement) / 2;\n            let prevRowElement = rowElement.previousElementSibling;\n            \n            if (pageY < rowMidY) {\n                DomHandler.removeClass(rowElement, 'ui-table-dragpoint-bottom');\n    \n                this.droppedRowIndex = index;\n                if (prevRowElement)\n                    DomHandler.addClass(prevRowElement, 'ui-table-dragpoint-bottom');\n                else\n                    DomHandler.addClass(rowElement, 'ui-table-dragpoint-top');\n            }\n            else {\n                if (prevRowElement)\n                    DomHandler.removeClass(prevRowElement, 'ui-table-dragpoint-bottom');\n                else\n                    DomHandler.addClass(rowElement, 'ui-table-dragpoint-top');\n    \n                this.droppedRowIndex = index + 1;\n                DomHandler.addClass(rowElement, 'ui-table-dragpoint-bottom');\n            }\n        }\n    }\n\n    onRowDragLeave(event, rowElement) {\n        let prevRowElement = rowElement.previousElementSibling;\n        if (prevRowElement) {\n            DomHandler.removeClass(prevRowElement, 'ui-table-dragpoint-bottom');\n        }\n\n        DomHandler.removeClass(rowElement, 'ui-table-dragpoint-bottom');\n        DomHandler.removeClass(rowElement, 'ui-table-dragpoint-top');\n    }\n\n    onRowDragEnd(event) {\n        this.rowDragging = false;\n        this.draggedRowIndex = null;\n        this.droppedRowIndex = null;\n    }\n\n    onRowDrop(event, rowElement) {\n        if (this.droppedRowIndex != null) {\n            let dropIndex = (this.draggedRowIndex > this.droppedRowIndex) ? this.droppedRowIndex : (this.droppedRowIndex === 0) ? 0 : this.droppedRowIndex - 1;\n            ObjectUtils.reorderArray(this.value, this.draggedRowIndex, dropIndex);\n\n            this.onRowReorder.emit({\n                dragIndex: this.draggedRowIndex,\n                dropIndex: dropIndex\n            });\n        }\n        //cleanup\n        this.onRowDragLeave(event, rowElement);\n        this.onRowDragEnd(event);\n    }\n\n    handleVirtualScroll(event) {\n        this.first = (event.page - 1) * this.rows;\n        this.firstChange.emit(this.first);\n        this.virtualScrollCallback = event.callback;\n        \n        this.zone.run(() => {\n            if (this.virtualScrollTimer) {\n                clearTimeout(this.virtualScrollTimer);\n            }\n            \n            this.virtualScrollTimer = setTimeout(() => {\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\n            }, this.virtualScrollDelay);\n        });\n    }\n\n    isEmpty() {\n        let data = this.filteredValue||this.value;\n        return data == null || data.length == 0;\n    }\n\n    getBlockableElement(): HTMLElementÂ {\n        return this.el.nativeElement.children[0];\n    }\n\n    getStorage() {\n        switch(this.stateStorage) {\n            case 'local':\n                return window.localStorage;\n\n            case 'session':\n                return window.sessionStorage;\n\n            default:\n                throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are \"local\" and \"session\".');\n        }\n    }\n\n    isStateful() {\n        return this.stateKey != null;\n    }\n\n    saveState() {\n        const storage = this.getStorage();\n        let state: TableState = {};\n        \n        if (this.paginator) {\n            state.first = this.first;\n            state.rows = this.rows;\n        }\n\n        if (this.sortField) {\n            state.sortField = this.sortField;\n            state.sortOrder = this.sortOrder;\n        }\n\n        if (this.multiSortMeta) {\n            state.multiSortMeta = this.multiSortMeta;\n        }\n\n        if (this.hasFilter()) {\n            state.filters = this.filters;\n        }\n\n        if (this.resizableColumns) {\n            this.saveColumnWidths(state);\n        }\n\n        if (this.reorderableColumns) {\n            this.saveColumnOrder(state);\n        }\n\n        if (this.selection) {\n            state.selection = this.selection;\n        }\n\n        if (Object.keys(this.expandedRowKeys).length) {\n            state.expandedRowKeys = this.expandedRowKeys;\n        }\n\n        if (Object.keys(state).length) {\n            storage.setItem(this.stateKey, JSON.stringify(state));\n        }\n\n        this.onStateSave.emit(state);\n    }\n\n    clearState() {\n        const storage = this.getStorage();\n\n        if (this.stateKey) {\n            storage.removeItem(this.stateKey);\n        }\n    }\n\n    restoreState() {\n        const storage = this.getStorage();\n        const stateString = storage.getItem(this.stateKey);\n        \n        if (stateString) {\n            let state: TableState = JSON.parse(stateString);\n\n            if (this.paginator) {\n                this.first = state.first;\n                this.rows = state.rows;\n                this.firstChange.emit(this.first);\n                this.rowsChange.emit(this.rows);\n            }\n\n            if (state.sortField) {\n                this.restoringSort = true;\n                this._sortField = state.sortField;\n                this._sortOrder = state.sortOrder;\n            }\n\n            if (state.multiSortMeta) {\n                this.restoringSort = true;\n                this._multiSortMeta = state.multiSortMeta;\n            }\n\n            if (state.filters) {\n                this.restoringFilter = true;\n                this.filters = state.filters;\n            }\n\n            if (this.resizableColumns) {\n                this.columnWidthsState = state.columnWidths;\n                this.tableWidthState = state.tableWidth;\n            }\n\n            if (state.expandedRowKeys) {\n                this.expandedRowKeys = state.expandedRowKeys;\n            }\n\n            if (state.selection) {\n                Promise.resolve(null).then(() => this.selectionChange.emit(state.selection));\n            }\n\n            this.stateRestored = true;\n\n            this.onStateRestore.emit(state);\n        }\n    }\n\n    saveColumnWidths(state) {\n        let widths = [];\n        let headers = DomHandler.find(this.containerViewChild.nativeElement, '.ui-table-thead > tr:first-child > th');\n        headers.map(header => widths.push(DomHandler.getOuterWidth(header)));\n        state.columnWidths = widths.join(',');\n\n        if (this.columnResizeMode === 'expand') {\n            state.tableWidth = this.scrollable ? DomHandler.findSingle(this.containerViewChild.nativeElement, '.ui-table-scrollable-header-table').style.width :\n                                                DomHandler.getOuterWidth(this.tableViewChild.nativeElement) + 'px';\n        }\n    }\n\n    restoreColumnWidths() {\n        if (this.columnWidthsState) {\n            let widths = this.columnWidthsState.split(',');\n\n            if (this.columnResizeMode === 'expand' && this.tableWidthState) {\n                if (this.scrollable) {\n                    this.setScrollableItemsWidthOnExpandResize(null, this.tableWidthState, 0);\n                }\n                else {\n                    this.tableViewChild.nativeElement.style.width = this.tableWidthState;\n                    this.containerViewChild.nativeElement.style.width = this.tableWidthState;\n                }\n            }\n\n            if (this.scrollable) {\n                let headerCols = DomHandler.find(this.containerViewChild.nativeElement, '.ui-table-scrollable-header-table > colgroup > col');\n                let bodyCols = DomHandler.find(this.containerViewChild.nativeElement, '.ui-table-scrollable-body-table > colgroup > col');\n\n                headerCols.map((col, index) => col.style.width = widths[index] + 'px');\n                bodyCols.map((col, index) => col.style.width = widths[index] + 'px');\n            }\n            else {\n                let headers = DomHandler.find(this.tableViewChild.nativeElement, '.ui-table-thead > tr:first-child > th');\n                headers.map((header, index) => header.style.width = widths[index] + 'px');\n            }\n        } \n    }\n\n    saveColumnOrder(state) {\n        if (this.columns) {\n            let columnOrder: string[] = [];\n            this.columns.map(column => {\n                columnOrder.push(column.field||column.key)\n            });\n\n            state.columnOrder = columnOrder;\n        }\n    }\n\n    restoreColumnOrder() {\n        const storage = this.getStorage();\n        const stateString = storage.getItem(this.stateKey);\n        if (stateString) {\n            let state: TableState = JSON.parse(stateString);\n            let columnOrder = state.columnOrder;\n            if (columnOrder) {\n                let reorderedColumns = [];\n                columnOrder.map(key => reorderedColumns.push(this.findColumnByKey(key)));\n                this.columnOrderStateRestored = true;\n                this.columns = reorderedColumns;\n            }\n        }\n    }\n\n    findColumnByKey(key) {\n        if (this.columns) {\n            for (let col of this.columns) {\n                if (col.key === key || col.field === key) \n                    return col;\n                else\n                    continue;\n            }\n        }\n        else {\n            return null;\n        }\n    }\n\n    ngOnDestroy() {\n        this.unbindDocumentEditListener();\n        this.editingCell = null;\n        this.initialized = null;\n    }\n}\n\n@Component({\n    selector: '[pTableBody]',\n    template: `\n        <ng-container *ngIf=\"!dt.expandedRowTemplate\">\n            <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"(dt.paginator && !dt.lazy) ? ((dt.filteredValue||dt.value) | slice:dt.first:(dt.first + dt.rows)) : (dt.filteredValue||dt.value)\" [ngForTrackBy]=\"dt.rowTrackBy\">\n                <ng-container *ngTemplateOutlet=\"template; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns, editing: (dt.editMode === 'row' && dt.isRowEditing(rowData))}\"></ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"dt.expandedRowTemplate\">\n            <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"(dt.paginator && !dt.lazy) ? ((dt.filteredValue||dt.value) | slice:dt.first:(dt.first + dt.rows)) : (dt.filteredValue||dt.value)\" [ngForTrackBy]=\"dt.rowTrackBy\">\n                <ng-container *ngTemplateOutlet=\"template; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns, expanded: dt.isRowExpanded(rowData), editing: (dt.editMode === 'row' && dt.isRowEditing(rowData))}\"></ng-container>\n                <ng-container *ngIf=\"dt.isRowExpanded(rowData)\">\n                    <ng-container *ngTemplateOutlet=\"dt.expandedRowTemplate; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns}\"></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"dt.isEmpty()\">\n            <ng-container *ngTemplateOutlet=\"dt.emptyMessageTemplate; context: {$implicit: columns, frozen: frozen}\"></ng-container>\n        </ng-container>\n    `\n})\nexport class TableBody {\n\n    @Input(\"pTableBody\") columns: any[];\n\n    @Input(\"pTableBodyTemplate\") template: TemplateRef<any>;\n \n    @Input() frozen: boolean;\n\n    constructor(public dt: Table) {}\n}\n\n@Component({\n    selector: '[pScrollableView]',\n    template: `\n        <div #scrollHeader class=\"ui-table-scrollable-header ui-widget-header\">\n            <div #scrollHeaderBox class=\"ui-table-scrollable-header-box\">\n                <table class=\"ui-table-scrollable-header-table\" [ngClass]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <thead class=\"ui-table-thead\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenHeaderTemplate||dt.headerTemplate : dt.headerTemplate; context {$implicit: columns}\"></ng-container>\n                    </thead>\n                    <tbody class=\"ui-table-tbody\">\n                        <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"dt.frozenValue\" [ngForTrackBy]=\"dt.rowTrackBy\">\n                            <ng-container *ngTemplateOutlet=\"dt.frozenRowsTemplate; context: {$implicit: rowData, rowIndex: rowIndex, columns: columns}\"></ng-container>\n                        </ng-template>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <div #scrollBody class=\"ui-table-scrollable-body\">\n            <table #scrollTable [ngClass]=\"{'ui-table-scrollable-body-table': true, 'ui-table-virtual-table': dt.virtualScroll}\" [class]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                <tbody class=\"ui-table-tbody\" [pTableBody]=\"columns\" [pTableBodyTemplate]=\"frozen ? dt.frozenBodyTemplate||dt.bodyTemplate : dt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\n            </table>\n            <table #loadingTable *ngIf=\"dt.virtualScroll && dt.loadingBodyTemplate != null\" [ngClass]=\"{'ui-table-scrollable-body-table ui-table-loading-virtual-table': true, 'ui-table-virtual-table': dt.virtualScroll}\">\n                <tbody class=\"ui-table-tbody\">\n                    <ng-template ngFor [ngForOf]=\"loadingArray\">\n                        <ng-container *ngTemplateOutlet=\"dt.loadingBodyTemplate; context: {columns: columns}\"></ng-container>\n                    </ng-template>\n                </tbody>\n            </table>\n            <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n            <div #virtualScroller class=\"ui-table-virtual-scroller\" *ngIf=\"dt.virtualScroll\"></div>\n        </div>\n        <div #scrollFooter class=\"ui-table-scrollable-footer ui-widget-header\">\n            <div #scrollFooterBox class=\"ui-table-scrollable-footer-box\">\n                <table class=\"ui-table-scrollable-footer-table\" [ngClass]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n                    <tfoot class=\"ui-table-tfoot\">\n                        <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenFooterTemplate||dt.footerTemplate : dt.footerTemplate; context {$implicit: columns}\"></ng-container>\n                    </tfoot>\n                </table>\n            </div>\n        </div>\n    `\n})\nexport class ScrollableView implements AfterViewInit,OnDestroy,AfterViewChecked {\n\n    @Input(\"pScrollableView\") columns: any[];\n\n    @Input() frozen: boolean;\n\n    @ViewChild('scrollHeader', { static: true }) scrollHeaderViewChild: ElementRef;\n\n    @ViewChild('scrollHeaderBox', { static: true }) scrollHeaderBoxViewChild: ElementRef;\n\n    @ViewChild('scrollBody', { static: true }) scrollBodyViewChild: ElementRef;\n\n    @ViewChild('scrollTable', { static: true }) scrollTableViewChild: ElementRef;\n\n    @ViewChild('loadingTable', { static: false }) scrollLoadingTableViewChild: ElementRef;\n\n    @ViewChild('scrollFooter', { static: true }) scrollFooterViewChild: ElementRef;\n\n    @ViewChild('scrollFooterBox', { static: true }) scrollFooterBoxViewChild: ElementRef;\n\n    @ViewChild('virtualScroller', { static: false }) virtualScrollerViewChild: ElementRef;\n\n    @ViewChild('scrollableAligner', { static: false }) scrollableAlignerViewChild: ElementRef;\n\n    headerScrollListener: Function;\n\n    bodyScrollListener: Function;\n\n    footerScrollListener: Function;\n\n    frozenSiblingBody: Element;\n\n    scrollableSiblingBody: Element;\n\n    _scrollHeight: string;\n\n    subscription: Subscription;\n\n    totalRecordsSubscription: Subscription;\n\n    columnsSubscription: Subscription;\n    \n    initialized: boolean;\n\n    preventBodyScrollPropagation: boolean;\n\n    loadingArray: number[] = [];\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) {\n        this.subscription = this.dt.tableService.valueSource$.subscribe(() => {\n            this.zone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    this.alignScrollBar();\n\n                    if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\n                        this.scrollLoadingTableViewChild.nativeElement.style.display = 'none';\n                    }\n                }, 50);\n            });\n        });\n\n        if (this.dt.virtualScroll) {\n            this.totalRecordsSubscription = this.dt.tableService.totalRecordsSource$.subscribe(() => {\n                this.zone.runOutsideAngular(() => {\n                    setTimeout(() => {\n                        this.setVirtualScrollerHeight();\n                    }, 50);\n                });\n            });\n        }\n\n        this.loadingArray = Array(this.dt.rows).fill(1);\n        \n        this.initialized = false;\n     }\n\n    @Input() get scrollHeight(): string {\n        return this._scrollHeight;\n    }\n    set scrollHeight(val: string) {\n        this._scrollHeight = val;\n        this.setScrollHeight();\n    }\n    \n    ngAfterViewChecked() {\n        if (!this.initialized && this.el.nativeElement.offsetParent) {\n            this.alignScrollBar();\n            this.setScrollHeight();\n            this.initialized = true;\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.frozen) {\n            if (this.dt.frozenColumns || this.dt.frozenBodyTemplate) {\n                DomHandler.addClass(this.el.nativeElement, 'ui-table-unfrozen-view');\n            }\n\n            let frozenView = this.el.nativeElement.previousElementSibling;\n            if (frozenView) {\n                this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.ui-table-scrollable-body');\n            }\n        }\n        else {\n            if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\n                this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\n            }\n            let scrollableView = this.el.nativeElement.nextElementSibling;\n            if (scrollableView) {\n                this.scrollableSiblingBody = DomHandler.findSingle(scrollableView, '.ui-table-scrollable-body');\n            }\n        }\n\n        this.bindEvents();\n        this.setScrollHeight();\n        this.alignScrollBar();\n\n        if (this.frozen) {\n            this.columnsSubscription = this.dt.tableService.columnsSource$.subscribe(() => {\n                this.zone.runOutsideAngular(() => {\n                    setTimeout(() => {\n                        this.setScrollHeight();\n                    }, 50);\n                });\n            });\n        }\n\n        if (this.dt.virtualScroll) {\n            this.setVirtualScrollerHeight();\n\n            if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\n                this.scrollLoadingTableViewChild.nativeElement.style.display = 'table';\n            }\n        }\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            let scrollBarWidth = DomHandler.calculateScrollbarWidth();\n\n            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n                this.headerScrollListener = this.onHeaderScroll.bind(this);\n                this.scrollHeaderViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);\n            }\n\n            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n                this.footerScrollListener = this.onFooterScroll.bind(this);\n                this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);\n            }\n\n            if (!this.frozen) {\n                this.bodyScrollListener = this.onBodyScroll.bind(this);\n                this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\n            }\n        });\n    }\n\n    unbindEvents() {\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\n        }\n\n        this.scrollBodyViewChild.nativeElement.removeEventListener('scroll', this.bodyScrollListener);\n    }\n\n    onHeaderScroll(event) {\n        const scrollLeft = this.scrollHeaderViewChild.nativeElement.scrollLeft;\n\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n\n        this.preventBodyScrollPropagation = true;\n    }\n\n    onFooterScroll(event) {\n        const scrollLeft = this.scrollFooterViewChild.nativeElement.scrollLeft;\n\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\n\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\n        }\n\n        this.preventBodyScrollPropagation = true;\n    }\n\n    onBodyScroll(event) {\n        if (this.preventBodyScrollPropagation) {\n            this.preventBodyScrollPropagation = false;\n            return;\n        }\n\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * this.scrollBodyViewChild.nativeElement.scrollLeft + 'px';\n        }\n\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * this.scrollBodyViewChild.nativeElement.scrollLeft + 'px';\n        }\n\n        if (this.frozenSiblingBody) {\n            this.frozenSiblingBody.scrollTop = this.scrollBodyViewChild.nativeElement.scrollTop;\n        }\n\n        if (this.dt.virtualScroll) {\n            let viewport = DomHandler.getOuterHeight(this.scrollBodyViewChild.nativeElement);\n            let tableHeight = DomHandler.getOuterHeight(this.scrollTableViewChild.nativeElement);\n            let pageHeight = this.dt.virtualRowHeight * this.dt.rows;\n            let virtualTableHeight = DomHandler.getOuterHeight(this.virtualScrollerViewChild.nativeElement);\n            let pageCount = (virtualTableHeight / pageHeight)||1;\n            let scrollBodyTop = this.scrollTableViewChild.nativeElement.style.top||'0';\n\n            if ((this.scrollBodyViewChild.nativeElement.scrollTop + viewport > parseFloat(scrollBodyTop) + tableHeight) ||Â (this.scrollBodyViewChild.nativeElement.scrollTop < parseFloat(scrollBodyTop))) {\n                if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\n                    this.scrollLoadingTableViewChild.nativeElement.style.display = 'table';\n                    this.scrollLoadingTableViewChild.nativeElement.style.top = this.scrollBodyViewChild.nativeElement.scrollTop + 'px';\n                }\n\n                let page = Math.floor((this.scrollBodyViewChild.nativeElement.scrollTop * pageCount) / (this.scrollBodyViewChild.nativeElement.scrollHeight)) + 1;\n                this.dt.handleVirtualScroll({\n                    page: page,\n                    callback: () => {\n                        if (this.scrollLoadingTableViewChild && this.scrollLoadingTableViewChild.nativeElement) {\n                            this.scrollLoadingTableViewChild.nativeElement.style.display = 'none';\n                        }\n                        \n                        this.scrollTableViewChild.nativeElement.style.top = ((page - 1) * pageHeight) + 'px';\n\n                        if (this.frozenSiblingBody) {\n                            (<HTMLElement> this.frozenSiblingBody.children[0]).style.top = this.scrollTableViewChild.nativeElement.style.top;\n                        }\n\n                        this.dt.anchorRowIndex = null;\n                    }\n                });\n            }\n        }\n    }\n\n    setScrollHeight() {\n        if (this.scrollHeight && this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\n            if (this.scrollHeight.indexOf('%') !== -1) {\n                let relativeHeight;\n                this.scrollBodyViewChild.nativeElement.style.visibility = 'hidden';\n                this.scrollBodyViewChild.nativeElement.style.height = '100px';     //temporary height to calculate static height\n                let containerHeight = DomHandler.getOuterHeight(this.dt.el.nativeElement.children[0]);\n                \n                if (this.scrollHeight.includes(\"calc\")) {\n                    let percentHeight = parseInt(this.scrollHeight.slice(this.scrollHeight.indexOf(\"(\") + 1, this.scrollHeight.indexOf(\"%\")));\n                    let diffValue = parseInt(this.scrollHeight.slice(this.scrollHeight.indexOf(\"-\") + 1, this.scrollHeight.indexOf(\")\")));\n                    relativeHeight = (DomHandler.getOuterHeight(this.dt.el.nativeElement.parentElement) * percentHeight / 100) - diffValue;\n                }\n                else {\n                    relativeHeight = DomHandler.getOuterHeight(this.dt.el.nativeElement.parentElement) * parseInt(this.scrollHeight) / 100;\n                }\n                \n                let staticHeight = containerHeight - 100;   //total height of headers, footers, paginators\n                let scrollBodyHeight = (relativeHeight - staticHeight);\n\n                if (this.frozen) {\n                    scrollBodyHeight -= DomHandler.calculateScrollbarWidth();\n                }\n                \n                this.scrollBodyViewChild.nativeElement.style.height = 'auto';\n                this.scrollBodyViewChild.nativeElement.style.maxHeight = scrollBodyHeight + 'px';\n                this.scrollBodyViewChild.nativeElement.style.visibility = 'visible';\n            }\n            else {    \n                this.scrollBodyViewChild.nativeElement.style.maxHeight = this.scrollHeight;          \n            }\n        }\n    }\n\n    setVirtualScrollerHeight() {\n        if (this.virtualScrollerViewChild.nativeElement) {\n            this.virtualScrollerViewChild.nativeElement.style.height = this.dt.totalRecords * this.dt.virtualRowHeight + 'px';\n        }\n    }\n\n    hasVerticalOverflow() {\n        return DomHandler.getOuterHeight(this.scrollTableViewChild.nativeElement) > DomHandler.getOuterHeight(this.scrollBodyViewChild.nativeElement);\n    }\n\n    alignScrollBar() {\n        if (!this.frozen) {\n            let scrollBarWidth = this.hasVerticalOverflow() ? DomHandler.calculateScrollbarWidth() : 0;\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';\n            \n            if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\n                this.scrollFooterBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';\n            }\n        }\n        this.initialized = false;\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n\n        this.frozenSiblingBody = null;\n\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n\n        if (this.totalRecordsSubscription) {\n            this.totalRecordsSubscription.unsubscribe();\n        }\n\n        if (this.columnsSubscription)Â {\n            this.columnsSubscription.unsubscribe();\n        }\n\n        this.initialized = false;\n    }\n}\n\n@Directive({\n    selector: '[pSortableColumn]',\n    host: {\n        '[class.ui-sortable-column]': 'isEnabled()',\n        '[class.ui-state-highlight]': 'sorted',\n        '[attr.tabindex]': 'isEnabled() ? \"0\" : null'\n    }\n})\nexport class SortableColumn implements OnInit, OnDestroy {\n\n    @Input(\"pSortableColumn\") field: string;\n\n    @Input() pSortableColumnDisabled: boolean;\n\n    sorted: boolean;\n    \n    subscription: Subscription;\n\n    constructor(public dt: Table) {\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.sortSource$.subscribe(sortMeta => {\n                this.updateSortState();\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.updateSortState();\n        }\n    }\n\n    updateSortState() {\n        this.sorted = this.dt.isSorted(this.field);\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        let targetNode = event.target;\n        if ((DomHandler.hasClass(targetNode, 'ui-sortable-column') || DomHandler.hasClass(targetNode, 'ui-sortable-column-icon')) && this.isEnabled()) {\n            this.updateSortState();\n            this.dt.sort({\n                originalEvent: event,\n                field: this.field\n            });\n\n            DomHandler.clearSelection();\n        }\n    }\n\n    @HostListener('keydown.enter', ['$event'])\n    onEnterKey(event: MouseEvent) {\n        this.onClick(event);\n    }\n\n    isEnabled() {\n        return this.pSortableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n\n@Component({\n    selector: 'p-sortIcon',\n    template: `\n        <i class=\"ui-sortable-column-icon pi pi-fw\" [ngClass]=\"{'pi-sort-up': sortOrder === 1, 'pi-sort-down': sortOrder === -1, 'pi-sort': sortOrder === 0}\"></i>\n    `\n})\nexport class SortIcon implements OnInit, OnDestroy {\n    \n    @Input() field: string;\n        \n    subscription: Subscription;\n    \n    sortOrder: number;\n    \n    constructor(public dt: Table) {\n        this.subscription = this.dt.tableService.sortSource$.subscribe(sortMeta => {\n            this.updateSortState();\n        });\n    }\n    \n    ngOnInit() {\n        this.updateSortState();\n    }\n    \n    onClick(event){\n        event.preventDefault();\n    }\n    \n    updateSortState() {\n        if (this.dt.sortMode === 'single') {\n            this.sortOrder = this.dt.isSorted(this.field) ? this.dt.sortOrder : 0;\n        }\n        else if (this.dt.sortMode === 'multiple') {\n            let sortMeta = this.dt.getSortMeta(this.field);\n            this.sortOrder = sortMeta ? sortMeta.order: 0;\n        }\n    }\n    \n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n\n@Directive({\n    selector: '[pSelectableRow]',\n    host: {\n        '[class.ui-selectable-row]': 'isEnabled()',\n        '[class.ui-state-highlight]': 'selected',\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined',\n    }\n})\nexport class SelectableRow implements OnInit, OnDestroy {\n\n    @Input(\"pSelectableRow\") data: any;\n\n    @Input(\"pSelectableRowIndex\") index: number;\n\n    @Input() pSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.dt.isSelected(this.data);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.dt.isSelected(this.data);\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowClick({\n                originalEvent: event,\n                rowData: this.data,\n                rowIndex: this.index\n            });\n        }\n    }\n    \n    @HostListener('touchend', ['$event'])\n    onTouchEnd(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowTouchEnd(event);\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            const row = <HTMLTableRowElement> event.target;\n\n            switch (event.which) {\n                //down arrow\n                case 40:\n                    let nextRow = this.findNextSelectableRow(row);\n                    if (nextRow) {\n                        nextRow.focus();\n                    }\n\n                    event.preventDefault();\n                break;\n    \n                //up arrow\n                case 38:\n                    let prevRow = this.findPrevSelectableRow(row);\n                    if (prevRow) {\n                        prevRow.focus();\n                    }\n\n                    event.preventDefault();\n                break;\n    \n                //enter\n                case 13:\n                    this.dt.handleRowClick({\n                        originalEvent: event,\n                        rowData: this.data,\n                        rowIndex: this.index\n                    });\n                break;\n    \n                default:\n                //no op\n                break;\n            }\n        }\n    }\n\n    findNextSelectableRow(row: HTMLTableRowElement): HTMLTableRowElement {\n        let nextRow = <HTMLTableRowElement> row.nextElementSibling;\n        if (nextRow) {\n            if (DomHandler.hasClass(nextRow, 'ui-selectable-row'))\n                return nextRow;\n            else\n                return this.findNextSelectableRow(nextRow);\n        }\n        else {\n            return null;\n        }\n    }\n\n    findPrevSelectableRow(row: HTMLTableRowElement): HTMLTableRowElement {\n        let prevRow = <HTMLTableRowElement> row.previousElementSibling;\n        if (prevRow) {\n            if (DomHandler.hasClass(prevRow, 'ui-selectable-row'))\n                return prevRow;\n            else\n                return this.findPrevSelectableRow(prevRow);\n        }\n        else {\n            return null;\n        }\n    }\n    \n    isEnabled() {\n        return this.pSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[pSelectableRowDblClick]',\n    host: {\n        '[class.ui-selectable-row]': 'isEnabled()',\n        '[class.ui-state-highlight]': 'selected'\n    }\n})\nexport class SelectableRowDblClick implements OnInit, OnDestroy {\n\n    @Input(\"pSelectableRowDblClick\") data: any;\n\n    @Input(\"pSelectableRowIndex\") index: number;\n\n    @Input() pSelectableRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n                this.selected = this.dt.isSelected(this.data);\n            });\n        }\n    }\n\n    ngOnInit() {\n        if (this.isEnabled()) {\n            this.selected = this.dt.isSelected(this.data);\n        }\n    }\n\n    @HostListener('dblclick', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowClick({\n                originalEvent: event,\n                rowData: this.data,\n                rowIndex: this.index\n            });\n        }\n    }\n    \n    isEnabled() {\n        return this.pSelectableRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[pContextMenuRow]',\n    host: {\n        '[class.ui-contextmenu-selected]': 'selected'\n    }\n})\nexport class ContextMenuRow {\n\n    @Input(\"pContextMenuRow\") data: any;\n\n    @Input(\"pContextMenuRowIndex\") index: number;\n\n    @Input() pContextMenuRowDisabled: boolean;\n\n    selected: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService) {\n        if (this.isEnabled()) {\n            this.subscription = this.dt.tableService.contextMenuSource$.subscribe((data) => {\n                this.selected = this.dt.equals(this.data, data);\n            });\n        }\n    }\n\n    @HostListener('contextmenu', ['$event'])\n    onContextMenu(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.handleRowRightClick({\n                originalEvent: event,\n                rowData: this.data,\n                rowIndex: this.index\n            });\n    \n            event.preventDefault();\n        }\n    }\n\n    isEnabled() {\n        return this.pContextMenuRowDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n\n}\n\n@Directive({\n    selector: '[pRowToggler]'\n})\nexport class RowToggler {\n\n    @Input('pRowToggler') data: any;\n\n    @Input() pRowTogglerDisabled: boolean;\n\n    constructor(public dt: Table) { }\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        if (this.isEnabled()) {\n            this.dt.toggleRow(this.data, event);\n            event.preventDefault();\n        }\n    }\n\n    isEnabled() {\n        return this.pRowTogglerDisabled !== true;\n    }\n}\n\n@Directive({\n    selector: '[pResizableColumn]'\n})\nexport class ResizableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() pResizableColumnDisabled: boolean;\n\n    resizer: HTMLSpanElement;\n\n    resizerMouseDownListener: any;\n\n    documentMouseMoveListener: any;\n\n    documentMouseUpListener: any;\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'ui-resizable-column');\n            this.resizer = document.createElement('span');\n            this.resizer.className = 'ui-column-resizer ui-clickable';\n            this.el.nativeElement.appendChild(this.resizer);\n    \n            this.zone.runOutsideAngular(() => {\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\n            });\n        }\n    }\n\n    bindDocumentEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\n\n            this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\n            document.addEventListener('mouseup', this.documentMouseUpListener);\n        });\n    }\n\n    unbindDocumentEvents() {\n        if (this.documentMouseMoveListener) {\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\n            this.documentMouseMoveListener = null;\n        }\n\n        if (this.documentMouseUpListener) {\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\n            this.documentMouseUpListener = null;\n        }\n    }\n\n    onMouseDown(event: MouseEvent) {\n        if (event.which === 1) {\n            this.dt.onColumnResizeBegin(event);\n            this.bindDocumentEvents();\n        } \n    }\n\n    onDocumentMouseMove(event: MouseEvent) {\n        this.dt.onColumnResize(event);\n    }\n\n    onDocumentMouseUp(event: MouseEvent) {\n        this.dt.onColumnResizeEnd(event, this.el.nativeElement);\n        this.unbindDocumentEvents();\n    }\n\n    isEnabled() {\n        return this.pResizableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        if (this.resizerMouseDownListener) {\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\n        }\n        \n        this.unbindDocumentEvents();\n    }\n}\n\n@Directive({\n    selector: '[pReorderableColumn]'\n})\nexport class ReorderableColumn implements AfterViewInit, OnDestroy {\n\n    @Input() pReorderableColumnDisabled: boolean;\n\n    dragStartListener: any;\n\n    dragOverListener: any;\n\n    dragEnterListener: any;\n\n    dragLeaveListener: any;\n\n    mouseDownListener: any;\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) { }\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.bindEvents();\n        }\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n\n            this.dragStartListener = this.onDragStart.bind(this);\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n\n            this.dragOverListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n\n            this.dragEnterListener = this.onDragEnter.bind(this);\n            this.el.nativeElement.addEventListener('dragenter', this.dragEnterListener);\n\n            this.dragLeaveListener = this.onDragLeave.bind(this);\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n        });\n    }\n\n    unbindEvents() {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragEnterListener) {\n            document.removeEventListener('dragenter', this.dragEnterListener);\n            this.dragEnterListener = null;\n        }\n\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    }\n\n    onMouseDown(event) {\n        if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'ui-column-resizer'))\n            this.el.nativeElement.draggable = false;\n        else\n            this.el.nativeElement.draggable = true;\n    }\n\n    onDragStart(event) {\n        this.dt.onColumnDragStart(event, this.el.nativeElement);\n    }\n\n    onDragOver(event) {\n        event.preventDefault();\n    }\n\n    onDragEnter(event) {\n        this.dt.onColumnDragEnter(event, this.el.nativeElement);\n    }\n\n    onDragLeave(event) {\n        this.dt.onColumnDragLeave(event);\n    }\n\n    @HostListener('drop', ['$event'])\n    onDrop(event) {\n        if (this.isEnabled()) {\n            this.dt.onColumnDrop(event, this.el.nativeElement);\n        }\n    }\n\n    isEnabled() {\n        return this.pReorderableColumnDisabled !== true;\n    }\n\n    ngOnDestroy() {\n        this.unbindEvents();\n    }\n\n}\n\n@Directive({\n    selector: '[pEditableColumn]'\n})\nexport class EditableColumn implements AfterViewInit {\n\n    @Input(\"pEditableColumn\") data: any;\n\n    @Input(\"pEditableColumnField\") field: any;\n\n    @Input() pEditableColumnDisabled: boolean;\n\n    @Input() pFocusCellSelector: string;\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) {}\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            DomHandler.addClass(this.el.nativeElement, 'ui-editable-column');\n        }\n    }\n\n    @HostListener('click', ['$event'])\n    onClick(event: MouseEvent) {\n        if (this.isEnabled()) {\n            this.dt.editingCellClick = true;\n\n            if (this.dt.editingCell) {\n                if (this.dt.editingCell !== this.el.nativeElement) {\n                    if (!this.dt.isEditingCellValid()) {\n                        return;\n                    }\n        \n                    DomHandler.removeClass(this.dt.editingCell, 'ui-editing-cell');\n                    this.openCell();\n                }\n            }\n            else {\n                this.openCell();\n            }\n        }\n    }\n\n    openCell() {\n        this.dt.updateEditingCell(this.el.nativeElement, this.data, this.field);\n        DomHandler.addClass(this.el.nativeElement, 'ui-editing-cell');\n        this.dt.onEditInit.emit({ field: this.field, data: this.data});\n        this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n                let focusCellSelector = this.pFocusCellSelector || 'input, textarea, select';\n                let focusableElement = DomHandler.findSingle(this.el.nativeElement, focusCellSelector);\n\n                if (focusableElement) {\n                    focusableElement.focus();\n                }\n            }, 50);\n        });\n    }\n\n    closeEditingCell() {\n        DomHandler.removeClass(this.dt.editingCell, 'ui-editing-cell');\n        this.dt.editingCell = null;\n        this.dt.editingCellData = null;\n        this.dt.editingCellField = null;\n        this.dt.unbindDocumentEditListener();\n    }\n\n    @HostListener('keydown', ['$event'])\n    onKeyDown(event: KeyboardEvent) {\n        if (this.isEnabled()) {\n            //enter\n            if (event.keyCode == 13) {\n                if (this.dt.isEditingCellValid()) {\n                    this.closeEditingCell();\n                    this.dt.onEditComplete.emit({ field: this.field, data: this.data, originalEvent: event });\n                }\n    \n                event.preventDefault();\n            }\n    \n            //escape\n            else if (event.keyCode == 27) {\n                if (this.dt.isEditingCellValid()) {\n                    this.closeEditingCell();\n                    this.dt.onEditCancel.emit({ field: this.field, data: this.data, originalEvent: event });\n                }\n    \n                event.preventDefault();\n            }\n    \n            //tab\n            else if (event.keyCode == 9) {\n                this.dt.onEditComplete.emit({ field: this.field, data: this.data, originalEvent: event });\n                \n                if (event.shiftKey)\n                    this.moveToPreviousCell(event);\n                else\n                    this.moveToNextCell(event);\n            }\n        }\n    }\n\n    findCell(element) {\n        if (element) {\n            let cell = element;\n            while (cell && !DomHandler.hasClass(cell, 'ui-editing-cell')) {\n                cell = cell.parentElement;\n            }\n\n            return cell;\n        }\n        else {\n            return null;\n        }\n    }\n\n    moveToPreviousCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findPreviousEditableColumn(currentCell);\n\n        if (targetCell) {\n            DomHandler.invokeElementMethod(event.target, 'blur');\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n\n    moveToNextCell(event: KeyboardEvent) {\n        let currentCell = this.findCell(event.target);\n        let row = currentCell.parentElement;\n        let targetCell = this.findNextEditableColumn(currentCell);\n\n        if (targetCell) {\n            DomHandler.invokeElementMethod(event.target, 'blur');\n            DomHandler.invokeElementMethod(targetCell, 'click');\n            event.preventDefault();\n        }\n    }\n\n    findPreviousEditableColumn(cell: Element) {\n        let prevCell = cell.previousElementSibling;\n\n        if (!prevCell) {\n            let previousRow = cell.parentElement.previousElementSibling;\n            if (previousRow) {\n                prevCell = previousRow.lastElementChild;\n            }\n        }\n\n        if (prevCell) {\n            if (DomHandler.hasClass(prevCell, 'ui-editable-column'))\n                return prevCell;\n            else\n                return this.findPreviousEditableColumn(prevCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    findNextEditableColumn(cell: Element) {\n        let nextCell = cell.nextElementSibling;\n\n        if (!nextCell) {\n            let nextRow = cell.parentElement.nextElementSibling;\n            if (nextRow) {\n                nextCell = nextRow.firstElementChild;\n            }\n        }\n\n        if (nextCell) {\n            if (DomHandler.hasClass(nextCell, 'ui-editable-column'))\n                return nextCell;\n            else\n                return this.findNextEditableColumn(nextCell);\n        }\n        else {\n            return null;\n        }\n    }\n\n    isEnabled() {\n        return this.pEditableColumnDisabled !== true;\n    }\n\n}\n\n@Directive({\n    selector: '[pEditableRow]'\n})\nexport class EditableRow {\n\n    @Input(\"pEditableRow\") data: any;\n\n    @Input() pEditableRowDisabled: boolean;\n\n    constructor(public el: ElementRef) {}\n\n    isEnabled() {\n        return this.pEditableRowDisabled !== true;\n    }\n\n}\n\n@Directive({\n    selector: '[pInitEditableRow]'\n})\nexport class InitEditableRow {\n\n    constructor(public dt: Table, public editableRow: EditableRow) {}\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        this.dt.initRowEdit(this.editableRow.data);\n        event.preventDefault();\n    }\n\n}\n\n@Directive({\n    selector: '[pSaveEditableRow]'\n})\nexport class SaveEditableRow {\n\n    constructor(public dt: Table, public editableRow: EditableRow) {}\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        this.dt.saveRowEdit(this.editableRow.data, this.editableRow.el.nativeElement);\n        event.preventDefault();\n    }\n}\n\n@Directive({\n    selector: '[pCancelEditableRow]'\n})\nexport class CancelEditableRow {\n\n    constructor(public dt: Table, public editableRow: EditableRow) {}\n\n    @HostListener('click', ['$event'])\n    onClick(event: Event) {\n        this.dt.cancelRowEdit(this.editableRow.data);\n        event.preventDefault();\n    }\n}\n\n@Component({\n    selector: 'p-cellEditor',\n    template: `\n        <ng-container *ngIf=\"editing\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!editing\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\n        </ng-container>\n    `\n})\nexport class CellEditor implements AfterContentInit {\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\n\n    inputTemplate: TemplateRef<any>;\n\n    outputTemplate: TemplateRef<any>;\n\n    constructor(public dt: Table, @Optional() public editableColumn: EditableColumn, @Optional() public editableRow: EditableRow) { }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'input':\n                    this.inputTemplate = item.template;\n                    break;\n\n                case 'output':\n                    this.outputTemplate = item.template;\n                    break;\n            }\n        });\n    }\n\n    get editing(): boolean {\n        return (this.dt.editingCell && this.editableColumn && this.dt.editingCell === this.editableColumn.el.nativeElement) ||\n                (this.editableRow && this.dt.editMode === 'row' && this.dt.isRowEditing(this.editableRow.data));\n    }\n\n}\n\n@Component({\n    selector: 'p-tableRadioButton',\n    template: `\n        <div class=\"ui-radiobutton ui-widget\" (click)=\"onClick($event)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input type=\"radio\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"disabled\">\n            </div>\n            <div #box [ngClass]=\"{'ui-radiobutton-box ui-widget ui-state-default':true,\n                'ui-state-active':checked, 'ui-state-disabled':disabled}\" role=\"radio\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-radiobutton-icon ui-clickable\" [ngClass]=\"{'pi pi-circle-on':checked}\"></span>\n            </div>\n        </div>\n    `\n})\nexport class TableRadioButton  {\n\n    @Input() disabled: boolean;\n\n    @Input() value: any;\n\n    @Input() index: number;\n\n    @ViewChild('box', { static: true }) boxViewChild: ElementRef;\n\n    checked: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService) {\n        this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.dt.isSelected(this.value);\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.dt.isSelected(this.value);\n    }\n\n    onClick(event: Event) {\n        if (!this.disabled) {\n            this.dt.toggleRowWithRadio({\n                originalEvent: event,\n                rowIndex: this.index\n            }, this.value);\n        }\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n   \n}\n\n@Component({\n    selector: 'p-tableCheckbox',\n    template: `\n        <div class=\"ui-chkbox ui-widget\" (click)=\"onClick($event)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"disabled\">\n            </div>\n            <div #box [ngClass]=\"{'ui-chkbox-box ui-widget ui-state-default':true,\n                'ui-state-active':checked, 'ui-state-disabled':disabled}\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `\n})\nexport class TableCheckbox  {\n\n    @Input() disabled: boolean;\n\n    @Input() value: any;\n\n    @Input() index: number;\n\n    @ViewChild('box', { static: true }) boxViewChild: ElementRef;\n\n    checked: boolean;\n\n    subscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService) {\n        this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.dt.isSelected(this.value);\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.dt.isSelected(this.value);\n    }\n\n    onClick(event: Event) {\n        if (!this.disabled) {\n            this.dt.toggleRowWithCheckbox({\n                originalEvent: event,\n                rowIndex: this.index\n            }, this.value);\n        }\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n   \n}\n\n@Component({\n    selector: 'p-tableHeaderCheckbox',\n    template: `\n        <div class=\"ui-chkbox ui-widget\" (click)=\"onClick($event)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #cb type=\"checkbox\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"isDisabled()\">\n            </div>\n            <div #box [ngClass]=\"{'ui-chkbox-box ui-widget ui-state-default':true,\n                'ui-state-active':checked, 'ui-state-disabled': isDisabled()}\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\n                <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n            </div>\n        </div>\n    `\n})\nexport class TableHeaderCheckbox  {\n\n    @ViewChild('box', { static: true }) boxViewChild: ElementRef;\n\n    @Input() disabled: boolean;\n\n    checked: boolean;\n\n    selectionChangeSubscription: Subscription;\n\n    valueChangeSubscription: Subscription;\n\n    constructor(public dt: Table, public tableService: TableService) {\n        this.valueChangeSubscription = this.dt.tableService.valueSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n\n        this.selectionChangeSubscription = this.dt.tableService.selectionSource$.subscribe(() => {\n            this.checked = this.updateCheckedState();\n        });\n    }\n\n    ngOnInit() {\n        this.checked = this.updateCheckedState();\n    }\n\n    onClick(event: Event) {\n        if (!this.disabled) {\n            if (this.dt.value && this.dt.value.length > 0) {\n                this.dt.toggleRowsWithCheckbox(event, !this.checked);\n            }\n        }\n\n        DomHandler.clearSelection();\n    }\n\n    onFocus() {\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    onBlur() {\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n    }\n\n    isDisabled() {\n        return this.disabled || !this.dt.value || !this.dt.value.length;\n    }\n\n    ngOnDestroy() {\n        if (this.selectionChangeSubscription) {\n            this.selectionChangeSubscription.unsubscribe();\n        }\n\n        if (this.valueChangeSubscription) {\n            this.valueChangeSubscription.unsubscribe();\n        }\n    }\n\n    updateCheckedState() {\n        if (this.dt.filteredValue) {\n            const val = this.dt.filteredValue;\n            return (val && val.length > 0 && this.dt.selection && this.dt.selection.length > 0 && this.isAllFilteredValuesChecked());\n        }\n        else {\n            const val = this.dt.value;\n            return (val && val.length > 0 && this.dt.selection && this.dt.selection.length > 0 && this.dt.selection.length === val.length);\n        }\n    }\n\n    isAllFilteredValuesChecked() {\n        if (!this.dt.filteredValue) {\n            return false;\n        }\n        else {\n            for (let rowData of this.dt.filteredValue) {\n                if (!this.dt.isSelected(rowData)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n   \n}\n\n@Directive({\n    selector: '[pReorderableRowHandle]'\n})\nexport class ReorderableRowHandle implements AfterViewInit {\n\n    @Input(\"pReorderableRowHandle\") index: number;\n    \n    constructor(public el: ElementRef) {}\n\n    ngAfterViewInit() {\n        DomHandler.addClass(this.el.nativeElement, 'ui-table-reorderablerow-handle');\n    }\n}\n\n@Directive({\n    selector: '[pReorderableRow]'\n})\nexport class ReorderableRow implements AfterViewInit {\n\n    @Input(\"pReorderableRow\") index: number;\n\n    @Input() pReorderableRowDisabled: boolean;\n\n    mouseDownListener: any;\n\n    dragStartListener: any;\n\n    dragEndListener: any;\n\n    dragOverListener: any;\n\n    dragLeaveListener: any;\n\n    dropListener: any;\n\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) {}\n\n    ngAfterViewInit() {\n        if (this.isEnabled()) {\n            this.el.nativeElement.droppable = true;\n            this.bindEvents();\n        }\n    }\n\n    bindEvents() {\n        this.zone.runOutsideAngular(() => {\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\n\n            this.dragStartListener = this.onDragStart.bind(this);\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\n\n            this.dragEndListener = this.onDragEnd.bind(this);\n            this.el.nativeElement.addEventListener('dragend', this.dragEndListener);\n\n            this.dragOverListener = this.onDragOver.bind(this);\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\n\n            this.dragLeaveListener = this.onDragLeave.bind(this);\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\n        });\n    }\n\n    unbindEvents() {\n        if (this.mouseDownListener) {\n            document.removeEventListener('mousedown', this.mouseDownListener);\n            this.mouseDownListener = null;\n        }\n\n        if (this.dragStartListener) {\n            document.removeEventListener('dragstart', this.dragStartListener);\n            this.dragStartListener = null;\n        }\n\n        if (this.dragEndListener) {\n            document.removeEventListener('dragend', this.dragEndListener);\n            this.dragEndListener = null;\n        }\n\n        if (this.dragOverListener) {\n            document.removeEventListener('dragover', this.dragOverListener);\n            this.dragOverListener = null;\n        }\n\n        if (this.dragLeaveListener) {\n            document.removeEventListener('dragleave', this.dragLeaveListener);\n            this.dragLeaveListener = null;\n        }\n    }\n\n    onMouseDown(event) {\n        if (DomHandler.hasClass(event.target, 'ui-table-reorderablerow-handle'))\n            this.el.nativeElement.draggable = true;\n        else\n            this.el.nativeElement.draggable = false;\n    }\n\n    onDragStart(event) {\n        this.dt.onRowDragStart(event, this.index);\n    }\n\n    onDragEnd(event) {\n        this.dt.onRowDragEnd(event);\n        this.el.nativeElement.draggable = false;\n    }\n\n    onDragOver(event) {\n        this.dt.onRowDragOver(event, this.index, this.el.nativeElement);\n        event.preventDefault();\n    }\n\n    onDragLeave(event) {\n        this.dt.onRowDragLeave(event, this.el.nativeElement);\n    }\n\n    isEnabled() {\n        return this.pReorderableRowDisabled !== true;\n    }\n\n    @HostListener('drop', ['$event'])\n    onDrop(event) {\n        if (this.isEnabled() && this.dt.rowDragging) {\n            this.dt.onRowDrop(event, this.el.nativeElement);\n        }\n    \n        event.preventDefault()\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,PaginatorModule],\n    exports: [Table,SharedModule,SortableColumn,SelectableRow,RowToggler,ContextMenuRow,ResizableColumn,ReorderableColumn,EditableColumn,CellEditor,SortIcon,TableRadioButton,TableCheckbox,TableHeaderCheckbox,ReorderableRowHandle,ReorderableRow,SelectableRowDblClick,EditableRow,InitEditableRow,SaveEditableRow,CancelEditableRow],\n    declarations: [Table,SortableColumn,SelectableRow,RowToggler,ContextMenuRow,ResizableColumn,ReorderableColumn,EditableColumn,CellEditor,TableBody,ScrollableView,SortIcon,TableRadioButton,TableCheckbox,TableHeaderCheckbox,ReorderableRowHandle,ReorderableRow,SelectableRowDblClick,EditableRow,InitEditableRow,SaveEditableRow,CancelEditableRow]\n})\nexport class TableModule { }\n"]}