import { ElementRef, NgZone, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { GridsterItem } from './gridsterItem.interface';
import { GridsterDraggable } from './gridsterDraggable.service';
import { GridsterResizable } from './gridsterResizable.service';
import { GridsterItemComponentInterface } from './gridsterItemComponent.interface';
import { GridsterComponent } from './gridster.component';
import * as ɵngcc0 from '@angular/core';
export declare class GridsterItemComponent implements OnInit, OnDestroy, GridsterItemComponentInterface {
    renderer: Renderer2;
    private zone;
    item: GridsterItem;
    $item: GridsterItem;
    el: any;
    gridster: GridsterComponent;
    top: number;
    left: number;
    width: number;
    height: number;
    drag: GridsterDraggable;
    resize: GridsterResizable;
    notPlaced: boolean;
    init: boolean;
    get zIndex(): number; 
    constructor(el: ElementRef, gridster: GridsterComponent, renderer: Renderer2, zone: NgZone);
    ngOnInit(): void;
    updateOptions(): void;
    ngOnDestroy(): void;
    setSize(): void;
    updateItemSize(): void;
    itemChanged(): void;
    checkItemChanges(newValue: GridsterItem, oldValue: GridsterItem): void;
    canBeDragged(): boolean;
    canBeResized(): boolean;
    bringToFront(offset: number): void;
    sendToBack(offset: number): void;
    private getLayerIndex;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GridsterItemComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GridsterItemComponent, "gridster-item", never, {
    "item": "item";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZHN0ZXJJdGVtLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJncmlkc3Rlckl0ZW0uY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBOZ1pvbmUsIE9uRGVzdHJveSwgT25Jbml0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgR3JpZHN0ZXJJdGVtIH0gZnJvbSAnLi9ncmlkc3Rlckl0ZW0uaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgR3JpZHN0ZXJEcmFnZ2FibGUgfSBmcm9tICcuL2dyaWRzdGVyRHJhZ2dhYmxlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBHcmlkc3RlclJlc2l6YWJsZSB9IGZyb20gJy4vZ3JpZHN0ZXJSZXNpemFibGUuc2VydmljZSc7XHJcbmltcG9ydCB7IEdyaWRzdGVySXRlbUNvbXBvbmVudEludGVyZmFjZSB9IGZyb20gJy4vZ3JpZHN0ZXJJdGVtQ29tcG9uZW50LmludGVyZmFjZSc7XHJcbmltcG9ydCB7IEdyaWRzdGVyQ29tcG9uZW50IH0gZnJvbSAnLi9ncmlkc3Rlci5jb21wb25lbnQnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBHcmlkc3Rlckl0ZW1Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgR3JpZHN0ZXJJdGVtQ29tcG9uZW50SW50ZXJmYWNlIHtcclxuICAgIHJlbmRlcmVyOiBSZW5kZXJlcjI7XHJcbiAgICBwcml2YXRlIHpvbmU7XHJcbiAgICBpdGVtOiBHcmlkc3Rlckl0ZW07XHJcbiAgICAkaXRlbTogR3JpZHN0ZXJJdGVtO1xyXG4gICAgZWw6IGFueTtcclxuICAgIGdyaWRzdGVyOiBHcmlkc3RlckNvbXBvbmVudDtcclxuICAgIHRvcDogbnVtYmVyO1xyXG4gICAgbGVmdDogbnVtYmVyO1xyXG4gICAgd2lkdGg6IG51bWJlcjtcclxuICAgIGhlaWdodDogbnVtYmVyO1xyXG4gICAgZHJhZzogR3JpZHN0ZXJEcmFnZ2FibGU7XHJcbiAgICByZXNpemU6IEdyaWRzdGVyUmVzaXphYmxlO1xyXG4gICAgbm90UGxhY2VkOiBib29sZWFuO1xyXG4gICAgaW5pdDogYm9vbGVhbjtcclxuICAgIGdldCB6SW5kZXgoKTogbnVtYmVyOyBcclxuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCBncmlkc3RlcjogR3JpZHN0ZXJDb21wb25lbnQsIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHpvbmU6IE5nWm9uZSk7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgdXBkYXRlT3B0aW9ucygpOiB2b2lkO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICAgIHNldFNpemUoKTogdm9pZDtcclxuICAgIHVwZGF0ZUl0ZW1TaXplKCk6IHZvaWQ7XHJcbiAgICBpdGVtQ2hhbmdlZCgpOiB2b2lkO1xyXG4gICAgY2hlY2tJdGVtQ2hhbmdlcyhuZXdWYWx1ZTogR3JpZHN0ZXJJdGVtLCBvbGRWYWx1ZTogR3JpZHN0ZXJJdGVtKTogdm9pZDtcclxuICAgIGNhbkJlRHJhZ2dlZCgpOiBib29sZWFuO1xyXG4gICAgY2FuQmVSZXNpemVkKCk6IGJvb2xlYW47XHJcbiAgICBicmluZ1RvRnJvbnQob2Zmc2V0OiBudW1iZXIpOiB2b2lkO1xyXG4gICAgc2VuZFRvQmFjayhvZmZzZXQ6IG51bWJlcik6IHZvaWQ7XHJcbiAgICBwcml2YXRlIGdldExheWVySW5kZXg7XHJcbn1cclxuIl19